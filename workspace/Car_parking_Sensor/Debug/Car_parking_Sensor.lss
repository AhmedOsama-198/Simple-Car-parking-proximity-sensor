
Car_parking_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000375e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  0000375e  000037f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800188  00800188  0000391a  2**0
                  ALLOC
  3 .stab         00002ef8  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001544  00000000  00000000  00006814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000080ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b87b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ca54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cc14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <__vector_10>
      2c:	0c 94 32 19 	jmp	0x3264	; 0x3264 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <main>
      8a:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 57       	subi	r30, 0x7E	; 126
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <BUZZER_init>:
#include "buzzer.h"
#include "gpio.h"


void BUZZER_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* setting buzzer pin as output pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	65 e0       	ldi	r22, 0x05	; 5
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>

	/* disabling buzzer at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <BUZZER_on>:

void BUZZER_on(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	/* enable buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <BUZZER_off>:

void BUZZER_off(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	/* disable buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <GPIO_setupPinDirection+0x6>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <GPIO_setupPinDirection+0x8>
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	6a 83       	std	Y+2, r22	; 0x02
     e92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	08 f0       	brcs	.+2      	; 0xe9c <GPIO_setupPinDirection+0x1c>
     e9a:	d5 c0       	rjmp	.+426    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <GPIO_setupPinDirection+0x24>
     ea2:	d1 c0       	rjmp	.+418    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3d 83       	std	Y+5, r19	; 0x05
     eac:	2c 83       	std	Y+4, r18	; 0x04
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	09 f4       	brne	.+2      	; 0xeba <GPIO_setupPinDirection+0x3a>
     eb8:	43 c0       	rjmp	.+134    	; 0xf40 <GPIO_setupPinDirection+0xc0>
     eba:	2c 81       	ldd	r18, Y+4	; 0x04
     ebc:	3d 81       	ldd	r19, Y+5	; 0x05
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	2c f4       	brge	.+10     	; 0xece <GPIO_setupPinDirection+0x4e>
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	71 f0       	breq	.+28     	; 0xee8 <GPIO_setupPinDirection+0x68>
     ecc:	bc c0       	rjmp	.+376    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <GPIO_setupPinDirection+0x5a>
     ed8:	5f c0       	rjmp	.+190    	; 0xf98 <GPIO_setupPinDirection+0x118>
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f4       	brne	.+2      	; 0xee6 <GPIO_setupPinDirection+0x66>
     ee4:	85 c0       	rjmp	.+266    	; 0xff0 <GPIO_setupPinDirection+0x170>
     ee6:	af c0       	rjmp	.+350    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	a1 f4       	brne	.+40     	; 0xf16 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     eee:	aa e3       	ldi	r26, 0x3A	; 58
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e3       	ldi	r30, 0x3A	; 58
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <GPIO_setupPinDirection+0x8c>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <GPIO_setupPinDirection+0x88>
     f10:	84 2b       	or	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	98 c0       	rjmp	.+304    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f16:	aa e3       	ldi	r26, 0x3A	; 58
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	ea e3       	ldi	r30, 0x3A	; 58
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <GPIO_setupPinDirection+0xb4>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <GPIO_setupPinDirection+0xb0>
     f38:	80 95       	com	r24
     f3a:	84 23       	and	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	83 c0       	rjmp	.+262    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f46:	a7 e3       	ldi	r26, 0x37	; 55
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_setupPinDirection+0xe4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_setupPinDirection+0xe0>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	6c c0       	rjmp	.+216    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f6e:	a7 e3       	ldi	r26, 0x37	; 55
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e3       	ldi	r30, 0x37	; 55
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_setupPinDirection+0x10c>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_setupPinDirection+0x108>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	57 c0       	rjmp	.+174    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	a1 f4       	brne	.+40     	; 0xfc6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f9e:	a4 e3       	ldi	r26, 0x34	; 52
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e4 e3       	ldi	r30, 0x34	; 52
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_setupPinDirection+0x13c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_setupPinDirection+0x138>
     fc0:	84 2b       	or	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	40 c0       	rjmp	.+128    	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fc6:	a4 e3       	ldi	r26, 0x34	; 52
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e4 e3       	ldi	r30, 0x34	; 52
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_setupPinDirection+0x164>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_setupPinDirection+0x160>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	2b c0       	rjmp	.+86     	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	a1 f4       	brne	.+40     	; 0x101e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_setupPinDirection+0x194>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_setupPinDirection+0x190>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    101e:	a1 e3       	ldi	r26, 0x31	; 49
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e1 e3       	ldi	r30, 0x31	; 49
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setupPinDirection+0x1bc>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setupPinDirection+0x1b8>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <GPIO_writePin+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <GPIO_writePin+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
    1068:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	08 f0       	brcs	.+2      	; 0x1072 <GPIO_writePin+0x1c>
    1070:	d5 c0       	rjmp	.+426    	; 0x121c <GPIO_writePin+0x1c6>
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <GPIO_writePin+0x24>
    1078:	d1 c0       	rjmp	.+418    	; 0x121c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <GPIO_writePin+0x3a>
    108e:	43 c0       	rjmp	.+134    	; 0x1116 <GPIO_writePin+0xc0>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <GPIO_writePin+0x4e>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	71 f0       	breq	.+28     	; 0x10be <GPIO_writePin+0x68>
    10a2:	bc c0       	rjmp	.+376    	; 0x121c <GPIO_writePin+0x1c6>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <GPIO_writePin+0x5a>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <GPIO_writePin+0x118>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <GPIO_writePin+0x66>
    10ba:	85 c0       	rjmp	.+266    	; 0x11c6 <GPIO_writePin+0x170>
    10bc:	af c0       	rjmp	.+350    	; 0x121c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	a1 f4       	brne	.+40     	; 0x10ec <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10c4:	ab e3       	ldi	r26, 0x3B	; 59
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	eb e3       	ldi	r30, 0x3B	; 59
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <GPIO_writePin+0x8c>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <GPIO_writePin+0x88>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	98 c0       	rjmp	.+304    	; 0x121c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10ec:	ab e3       	ldi	r26, 0x3B	; 59
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	eb e3       	ldi	r30, 0x3B	; 59
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <GPIO_writePin+0xb4>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <GPIO_writePin+0xb0>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	83 c0       	rjmp	.+262    	; 0x121c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	a1 f4       	brne	.+40     	; 0x1144 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    111c:	a8 e3       	ldi	r26, 0x38	; 56
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e8 e3       	ldi	r30, 0x38	; 56
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_writePin+0xe4>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_writePin+0xe0>
    113e:	84 2b       	or	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	6c c0       	rjmp	.+216    	; 0x121c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_writePin+0x10c>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_writePin+0x108>
    1166:	80 95       	com	r24
    1168:	84 23       	and	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	57 c0       	rjmp	.+174    	; 0x121c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1174:	a5 e3       	ldi	r26, 0x35	; 53
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e3       	ldi	r30, 0x35	; 53
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_writePin+0x13c>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_writePin+0x138>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	40 c0       	rjmp	.+128    	; 0x121c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_writePin+0x164>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_writePin+0x160>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	2b c0       	rjmp	.+86     	; 0x121c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11cc:	a2 e3       	ldi	r26, 0x32	; 50
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e2 e3       	ldi	r30, 0x32	; 50
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_writePin+0x194>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_writePin+0x190>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0x1bc>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0x1b8>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_readPin+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_readPin+0x8>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	8a 83       	std	Y+2, r24	; 0x02
    123c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    123e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	08 f0       	brcs	.+2      	; 0x1248 <GPIO_readPin+0x1c>
    1246:	84 c0       	rjmp	.+264    	; 0x1350 <GPIO_readPin+0x124>
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	08 f0       	brcs	.+2      	; 0x1250 <GPIO_readPin+0x24>
    124e:	80 c0       	rjmp	.+256    	; 0x1350 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	4c 81       	ldd	r20, Y+4	; 0x04
    125c:	5d 81       	ldd	r21, Y+5	; 0x05
    125e:	41 30       	cpi	r20, 0x01	; 1
    1260:	51 05       	cpc	r21, r1
    1262:	79 f1       	breq	.+94     	; 0x12c2 <GPIO_readPin+0x96>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	91 05       	cpc	r25, r1
    126c:	34 f4       	brge	.+12     	; 0x127a <GPIO_readPin+0x4e>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	21 15       	cp	r18, r1
    1274:	31 05       	cpc	r19, r1
    1276:	69 f0       	breq	.+26     	; 0x1292 <GPIO_readPin+0x66>
    1278:	6b c0       	rjmp	.+214    	; 0x1350 <GPIO_readPin+0x124>
    127a:	4c 81       	ldd	r20, Y+4	; 0x04
    127c:	5d 81       	ldd	r21, Y+5	; 0x05
    127e:	42 30       	cpi	r20, 0x02	; 2
    1280:	51 05       	cpc	r21, r1
    1282:	b9 f1       	breq	.+110    	; 0x12f2 <GPIO_readPin+0xc6>
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	91 05       	cpc	r25, r1
    128c:	09 f4       	brne	.+2      	; 0x1290 <GPIO_readPin+0x64>
    128e:	49 c0       	rjmp	.+146    	; 0x1322 <GPIO_readPin+0xf6>
    1290:	5f c0       	rjmp	.+190    	; 0x1350 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1292:	e9 e3       	ldi	r30, 0x39	; 57
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a9 01       	movw	r20, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <GPIO_readPin+0x7e>
    12a6:	55 95       	asr	r21
    12a8:	47 95       	ror	r20
    12aa:	8a 95       	dec	r24
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <GPIO_readPin+0x7a>
    12ae:	ca 01       	movw	r24, r20
    12b0:	81 70       	andi	r24, 0x01	; 1
    12b2:	90 70       	andi	r25, 0x00	; 0
    12b4:	88 23       	and	r24, r24
    12b6:	19 f0       	breq	.+6      	; 0x12be <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	49 c0       	rjmp	.+146    	; 0x1350 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12be:	19 82       	std	Y+1, r1	; 0x01
    12c0:	47 c0       	rjmp	.+142    	; 0x1350 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12c2:	e6 e3       	ldi	r30, 0x36	; 54
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	88 2f       	mov	r24, r24
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a9 01       	movw	r20, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <GPIO_readPin+0xae>
    12d6:	55 95       	asr	r21
    12d8:	47 95       	ror	r20
    12da:	8a 95       	dec	r24
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <GPIO_readPin+0xaa>
    12de:	ca 01       	movw	r24, r20
    12e0:	81 70       	andi	r24, 0x01	; 1
    12e2:	90 70       	andi	r25, 0x00	; 0
    12e4:	88 23       	and	r24, r24
    12e6:	19 f0       	breq	.+6      	; 0x12ee <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	31 c0       	rjmp	.+98     	; 0x1350 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	2f c0       	rjmp	.+94     	; 0x1350 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12f2:	e3 e3       	ldi	r30, 0x33	; 51
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <GPIO_readPin+0xde>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <GPIO_readPin+0xda>
    130e:	ca 01       	movw	r24, r20
    1310:	81 70       	andi	r24, 0x01	; 1
    1312:	90 70       	andi	r25, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	19 f0       	breq	.+6      	; 0x131e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	19 c0       	rjmp	.+50     	; 0x1350 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	17 c0       	rjmp	.+46     	; 0x1350 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1322:	e0 e3       	ldi	r30, 0x30	; 48
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <GPIO_readPin+0x10e>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <GPIO_readPin+0x10a>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	90 70       	andi	r25, 0x00	; 0
    1344:	88 23       	and	r24, r24
    1346:	19 f0       	breq	.+6      	; 0x134e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    134e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <GPIO_setupPortDirection+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <GPIO_setupPortDirection+0x8>
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	90 f5       	brcc	.+100    	; 0x13dc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3c 83       	std	Y+4, r19	; 0x04
    1380:	2b 83       	std	Y+3, r18	; 0x03
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	91 05       	cpc	r25, r1
    138a:	d1 f0       	breq	.+52     	; 0x13c0 <GPIO_setupPortDirection+0x5e>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	22 30       	cpi	r18, 0x02	; 2
    1392:	31 05       	cpc	r19, r1
    1394:	2c f4       	brge	.+10     	; 0x13a0 <GPIO_setupPortDirection+0x3e>
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	61 f0       	breq	.+24     	; 0x13b6 <GPIO_setupPortDirection+0x54>
    139e:	1e c0       	rjmp	.+60     	; 0x13dc <GPIO_setupPortDirection+0x7a>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	81 f0       	breq	.+32     	; 0x13ca <GPIO_setupPortDirection+0x68>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	91 05       	cpc	r25, r1
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <GPIO_setupPortDirection+0x72>
    13b4:	13 c0       	rjmp	.+38     	; 0x13dc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13b6:	ea e3       	ldi	r30, 0x3A	; 58
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	80 83       	st	Z, r24
    13be:	0e c0       	rjmp	.+28     	; 0x13dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13ca:	e4 e3       	ldi	r30, 0x34	; 52
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13d4:	e1 e3       	ldi	r30, 0x31	; 49
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
			break;
		}
	}
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <GPIO_writePort+0x6>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <GPIO_writePort+0x8>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	84 30       	cpi	r24, 0x04	; 4
    13fe:	90 f5       	brcc	.+100    	; 0x1464 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3c 83       	std	Y+4, r19	; 0x04
    1408:	2b 83       	std	Y+3, r18	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	d1 f0       	breq	.+52     	; 0x1448 <GPIO_writePort+0x5e>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <GPIO_writePort+0x3e>
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <GPIO_writePort+0x54>
    1426:	1e c0       	rjmp	.+60     	; 0x1464 <GPIO_writePort+0x7a>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <GPIO_writePort+0x68>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	81 f0       	breq	.+32     	; 0x145c <GPIO_writePort+0x72>
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1448:	e8 e3       	ldi	r30, 0x38	; 56
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	80 83       	st	Z, r24
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
			break;
		}
	}
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <GPIO_readPort+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_readPort+0x8>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1480:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	90 f5       	brcc	.+100    	; 0x14ec <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	3c 83       	std	Y+4, r19	; 0x04
    1490:	2b 83       	std	Y+3, r18	; 0x03
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	91 05       	cpc	r25, r1
    149a:	d1 f0       	breq	.+52     	; 0x14d0 <GPIO_readPort+0x5e>
    149c:	2b 81       	ldd	r18, Y+3	; 0x03
    149e:	3c 81       	ldd	r19, Y+4	; 0x04
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <GPIO_readPort+0x3e>
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	61 f0       	breq	.+24     	; 0x14c6 <GPIO_readPort+0x54>
    14ae:	1e c0       	rjmp	.+60     	; 0x14ec <GPIO_readPort+0x7a>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	81 f0       	breq	.+32     	; 0x14da <GPIO_readPort+0x68>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	81 f0       	breq	.+32     	; 0x14e4 <GPIO_readPort+0x72>
    14c4:	13 c0       	rjmp	.+38     	; 0x14ec <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14c6:	e9 e3       	ldi	r30, 0x39	; 57
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	0e c0       	rjmp	.+28     	; 0x14ec <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14d0:	e6 e3       	ldi	r30, 0x36	; 54
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14da:	e3 e3       	ldi	r30, 0x33	; 51
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	04 c0       	rjmp	.+8      	; 0x14ec <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14e4:	e0 e3       	ldi	r30, 0x30	; 48
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	2f 93       	push	r18
    1508:	3f 93       	push	r19
    150a:	4f 93       	push	r20
    150c:	5f 93       	push	r21
    150e:	6f 93       	push	r22
    1510:	7f 93       	push	r23
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1526:	80 91 88 01 	lds	r24, 0x0188
    152a:	90 91 89 01 	lds	r25, 0x0189
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	29 f0       	breq	.+10     	; 0x153c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1532:	e0 91 88 01 	lds	r30, 0x0188
    1536:	f0 91 89 01 	lds	r31, 0x0189
    153a:	09 95       	icall
	}
}
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <ICU_init+0x6>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    1570:	a1 e3       	ldi	r26, 0x31	; 49
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e1 e3       	ldi	r30, 0x31	; 49
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 7b       	andi	r24, 0xBF	; 191
    157c:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    157e:	ef e4       	ldi	r30, 0x4F	; 79
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	8c e0       	ldi	r24, 0x0C	; 12
    1584:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1586:	ae e4       	ldi	r26, 0x4E	; 78
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ee e4       	ldi	r30, 0x4E	; 78
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	98 2f       	mov	r25, r24
    1592:	98 7f       	andi	r25, 0xF8	; 248
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	80 81       	ld	r24, Z
    159a:	89 2b       	or	r24, r25
    159c:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    159e:	ae e4       	ldi	r26, 0x4E	; 78
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	ee e4       	ldi	r30, 0x4E	; 78
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	2f 7b       	andi	r18, 0xBF	; 191
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	81 81       	ldd	r24, Z+1	; 0x01
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	00 24       	eor	r0, r0
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	07 94       	ror	r0
    15be:	96 95       	lsr	r25
    15c0:	87 95       	ror	r24
    15c2:	07 94       	ror	r0
    15c4:	98 2f       	mov	r25, r24
    15c6:	80 2d       	mov	r24, r0
    15c8:	82 2b       	or	r24, r18
    15ca:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    15cc:	ec e4       	ldi	r30, 0x4C	; 76
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	11 82       	std	Z+1, r1	; 0x01
    15d2:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    15d4:	e6 e4       	ldi	r30, 0x46	; 70
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	11 82       	std	Z+1, r1	; 0x01
    15da:	10 82       	st	Z, r1

	/* enabling global I-bit */
	SREG|=(1<<7);
    15dc:	af e5       	ldi	r26, 0x5F	; 95
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ef e5       	ldi	r30, 0x5F	; 95
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	80 68       	ori	r24, 0x80	; 128
    15e8:	8c 93       	st	X, r24

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    15ea:	a9 e5       	ldi	r26, 0x59	; 89
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e9 e5       	ldi	r30, 0x59	; 89
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	80 62       	ori	r24, 0x20	; 32
    15f6:	8c 93       	st	X, r24


}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <ICU_setCallBack+0x6>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	90 93 89 01 	sts	0x0189, r25
    1618:	80 93 88 01 	sts	0x0188, r24
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1632:	ae e4       	ldi	r26, 0x4E	; 78
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ee e4       	ldi	r30, 0x4E	; 78
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	28 2f       	mov	r18, r24
    163e:	2f 7b       	andi	r18, 0xBF	; 191
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	88 2f       	mov	r24, r24
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	00 24       	eor	r0, r0
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	07 94       	ror	r0
    164e:	96 95       	lsr	r25
    1650:	87 95       	ror	r24
    1652:	07 94       	ror	r0
    1654:	98 2f       	mov	r25, r24
    1656:	80 2d       	mov	r24, r0
    1658:	82 2b       	or	r24, r18
    165a:	8c 93       	st	X, r24
}
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    166c:	e6 e4       	ldi	r30, 0x46	; 70
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1682:	ec e4       	ldi	r30, 0x4C	; 76
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	11 82       	std	Z+1, r1	; 0x01
    1688:	10 82       	st	Z, r1
}
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <ICU_deinit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deinit(void)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1698:	ef e4       	ldi	r30, 0x4F	; 79
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
	TCCR1B = 0;
    169e:	ee e4       	ldi	r30, 0x4E	; 78
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	10 82       	st	Z, r1
	TCNT1 = 0;
    16a4:	ec e4       	ldi	r30, 0x4C	; 76
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	11 82       	std	Z+1, r1	; 0x01
    16aa:	10 82       	st	Z, r1
	ICR1 = 0;
    16ac:	e6 e4       	ldi	r30, 0x46	; 70
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	11 82       	std	Z+1, r1	; 0x01
    16b2:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    16b4:	a9 e5       	ldi	r26, 0x59	; 89
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e9 e5       	ldi	r30, 0x59	; 89
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8f 7d       	andi	r24, 0xDF	; 223
    16c0:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    16c2:	10 92 89 01 	sts	0x0189, r1
    16c6:	10 92 88 01 	sts	0x0188, r1
}
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	2e 97       	sbiw	r28, 0x0e	; 14
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	41 e0       	ldi	r20, 0x01	; 1
    16f4:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 ea       	ldi	r26, 0xA0	; 160
    16fe:	b1 e4       	ldi	r27, 0x41	; 65
    1700:	8b 87       	std	Y+11, r24	; 0x0b
    1702:	9c 87       	std	Y+12, r25	; 0x0c
    1704:	ad 87       	std	Y+13, r26	; 0x0d
    1706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	55 e4       	ldi	r21, 0x45	; 69
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8f 83       	std	Y+7, r24	; 0x07
    1722:	98 87       	std	Y+8, r25	; 0x08
    1724:	a9 87       	std	Y+9, r26	; 0x09
    1726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <LCD_init+0x7a>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <LCD_init+0xda>
    178c:	80 e9       	ldi	r24, 0x90	; 144
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <LCD_init+0xc8>
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <LCD_init+0xbc>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <LCD_init+0x104>
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	63 e0       	ldi	r22, 0x03	; 3
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	65 e0       	ldi	r22, 0x05	; 5
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	66 e0       	ldi	r22, 0x06	; 6
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1804:	83 e3       	ldi	r24, 0x33	; 51
    1806:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    180a:	82 e3       	ldi	r24, 0x32	; 50
    180c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1810:	88 e2       	ldi	r24, 0x28	; 40
    1812:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1816:	8c e0       	ldi	r24, 0x0C	; 12
    1818:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>
}
    1822:	2e 96       	adiw	r28, 0x0e	; 14
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	c3 56       	subi	r28, 0x63	; 99
    1842:	d0 40       	sbci	r29, 0x00	; 0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	fe 01       	movw	r30, r28
    1850:	ed 59       	subi	r30, 0x9D	; 157
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    1860:	fe 01       	movw	r30, r28
    1862:	e1 5a       	subi	r30, 0xA1	; 161
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a0 e8       	ldi	r26, 0x80	; 128
    186c:	bf e3       	ldi	r27, 0x3F	; 63
    186e:	80 83       	st	Z, r24
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	a2 83       	std	Z+2, r26	; 0x02
    1874:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1876:	8e 01       	movw	r16, r28
    1878:	05 5a       	subi	r16, 0xA5	; 165
    187a:	1f 4f       	sbci	r17, 0xFF	; 255
    187c:	fe 01       	movw	r30, r28
    187e:	e1 5a       	subi	r30, 0xA1	; 161
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	4a e7       	ldi	r20, 0x7A	; 122
    1890:	55 e4       	ldi	r21, 0x45	; 69
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	f8 01       	movw	r30, r16
    189c:	80 83       	st	Z, r24
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a4:	fe 01       	movw	r30, r28
    18a6:	e5 5a       	subi	r30, 0xA5	; 165
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	44 f4       	brge	.+16     	; 0x18d2 <LCD_sendCommand+0x9e>
		__ticks = 1;
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 5a       	subi	r30, 0xA7	; 167
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	80 83       	st	Z, r24
    18d0:	64 c0       	rjmp	.+200    	; 0x199a <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    18d2:	fe 01       	movw	r30, r28
    18d4:	e5 5a       	subi	r30, 0xA5	; 165
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	60 81       	ld	r22, Z
    18da:	71 81       	ldd	r23, Z+1	; 0x01
    18dc:	82 81       	ldd	r24, Z+2	; 0x02
    18de:	93 81       	ldd	r25, Z+3	; 0x03
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	0c f0       	brlt	.+2      	; 0x18f2 <LCD_sendCommand+0xbe>
    18f0:	43 c0       	rjmp	.+134    	; 0x1978 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f2:	fe 01       	movw	r30, r28
    18f4:	e1 5a       	subi	r30, 0xA1	; 161
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8e 01       	movw	r16, r28
    1912:	07 5a       	subi	r16, 0xA7	; 167
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	f8 01       	movw	r30, r16
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	1f c0       	rjmp	.+62     	; 0x1968 <LCD_sendCommand+0x134>
    192a:	fe 01       	movw	r30, r28
    192c:	e9 5a       	subi	r30, 0xA9	; 169
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 e9       	ldi	r24, 0x90	; 144
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	fe 01       	movw	r30, r28
    193a:	e9 5a       	subi	r30, 0xA9	; 169
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_sendCommand+0x10e>
    1946:	fe 01       	movw	r30, r28
    1948:	e9 5a       	subi	r30, 0xA9	; 169
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	de 01       	movw	r26, r28
    1952:	a7 5a       	subi	r26, 0xA7	; 167
    1954:	bf 4f       	sbci	r27, 0xFF	; 255
    1956:	fe 01       	movw	r30, r28
    1958:	e7 5a       	subi	r30, 0xA7	; 167
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	9c 93       	st	X, r25
    1966:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	fe 01       	movw	r30, r28
    196a:	e7 5a       	subi	r30, 0xA7	; 167
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	d1 f6       	brne	.-76     	; 0x192a <LCD_sendCommand+0xf6>
    1976:	27 c0       	rjmp	.+78     	; 0x19c6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	8e 01       	movw	r16, r28
    197a:	07 5a       	subi	r16, 0xA7	; 167
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e5 5a       	subi	r30, 0xA5	; 165
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	f8 01       	movw	r30, r16
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
    199a:	de 01       	movw	r26, r28
    199c:	ab 5a       	subi	r26, 0xAB	; 171
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	fe 01       	movw	r30, r28
    19a2:	e7 5a       	subi	r30, 0xA7	; 167
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	8d 93       	st	X+, r24
    19ac:	9c 93       	st	X, r25
    19ae:	fe 01       	movw	r30, r28
    19b0:	eb 5a       	subi	r30, 0xAB	; 171
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <LCD_sendCommand+0x184>
    19bc:	fe 01       	movw	r30, r28
    19be:	eb 5a       	subi	r30, 0xAB	; 171
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    19d0:	fe 01       	movw	r30, r28
    19d2:	ef 5a       	subi	r30, 0xAF	; 175
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e8       	ldi	r26, 0x80	; 128
    19dc:	bf e3       	ldi	r27, 0x3F	; 63
    19de:	80 83       	st	Z, r24
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	8e 01       	movw	r16, r28
    19e8:	03 5b       	subi	r16, 0xB3	; 179
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	ef 5a       	subi	r30, 0xAF	; 175
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	55 e4       	ldi	r21, 0x45	; 69
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	80 83       	st	Z, r24
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	a2 83       	std	Z+2, r26	; 0x02
    1a12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a14:	fe 01       	movw	r30, r28
    1a16:	e3 5b       	subi	r30, 0xB3	; 179
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	40 e8       	ldi	r20, 0x80	; 128
    1a28:	5f e3       	ldi	r21, 0x3F	; 63
    1a2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2e:	88 23       	and	r24, r24
    1a30:	44 f4       	brge	.+16     	; 0x1a42 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1a32:	fe 01       	movw	r30, r28
    1a34:	e5 5b       	subi	r30, 0xB5	; 181
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
    1a40:	64 c0       	rjmp	.+200    	; 0x1b0a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1a42:	fe 01       	movw	r30, r28
    1a44:	e3 5b       	subi	r30, 0xB3	; 179
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	0c f0       	brlt	.+2      	; 0x1a62 <LCD_sendCommand+0x22e>
    1a60:	43 c0       	rjmp	.+134    	; 0x1ae8 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	fe 01       	movw	r30, r28
    1a64:	ef 5a       	subi	r30, 0xAF	; 175
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	8e 01       	movw	r16, r28
    1a82:	05 5b       	subi	r16, 0xB5	; 181
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	f8 01       	movw	r30, r16
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	1f c0       	rjmp	.+62     	; 0x1ad8 <LCD_sendCommand+0x2a4>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e7 5b       	subi	r30, 0xB7	; 183
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 e9       	ldi	r24, 0x90	; 144
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e7 5b       	subi	r30, 0xB7	; 183
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_sendCommand+0x27e>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5b       	subi	r30, 0xB7	; 183
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	91 83       	std	Z+1, r25	; 0x01
    1abe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	de 01       	movw	r26, r28
    1ac2:	a5 5b       	subi	r26, 0xB5	; 181
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e5 5b       	subi	r30, 0xB5	; 181
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 81       	ld	r24, Z
    1ace:	91 81       	ldd	r25, Z+1	; 0x01
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	9c 93       	st	X, r25
    1ad6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e5 5b       	subi	r30, 0xB5	; 181
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	d1 f6       	brne	.-76     	; 0x1a9a <LCD_sendCommand+0x266>
    1ae6:	27 c0       	rjmp	.+78     	; 0x1b36 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	8e 01       	movw	r16, r28
    1aea:	05 5b       	subi	r16, 0xB5	; 181
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	fe 01       	movw	r30, r28
    1af0:	e3 5b       	subi	r30, 0xB3	; 179
    1af2:	ff 4f       	sbci	r31, 0xFF	; 255
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	82 81       	ldd	r24, Z+2	; 0x02
    1afa:	93 81       	ldd	r25, Z+3	; 0x03
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	f8 01       	movw	r30, r16
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	de 01       	movw	r26, r28
    1b0c:	a9 5b       	subi	r26, 0xB9	; 185
    1b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b10:	fe 01       	movw	r30, r28
    1b12:	e5 5b       	subi	r30, 0xB5	; 181
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	91 81       	ldd	r25, Z+1	; 0x01
    1b1a:	8d 93       	st	X+, r24
    1b1c:	9c 93       	st	X, r25
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e9 5b       	subi	r30, 0xB9	; 185
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_sendCommand+0x2f4>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e9 5b       	subi	r30, 0xB9	; 185
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1b36:	fe 01       	movw	r30, r28
    1b38:	ed 59       	subi	r30, 0x9D	; 157
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 2f       	mov	r24, r24
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	80 71       	andi	r24, 0x10	; 16
    1b44:	90 70       	andi	r25, 0x00	; 0
    1b46:	95 95       	asr	r25
    1b48:	87 95       	ror	r24
    1b4a:	95 95       	asr	r25
    1b4c:	87 95       	ror	r24
    1b4e:	95 95       	asr	r25
    1b50:	87 95       	ror	r24
    1b52:	95 95       	asr	r25
    1b54:	87 95       	ror	r24
    1b56:	98 2f       	mov	r25, r24
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	63 e0       	ldi	r22, 0x03	; 3
    1b5c:	49 2f       	mov	r20, r25
    1b5e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1b62:	fe 01       	movw	r30, r28
    1b64:	ed 59       	subi	r30, 0x9D	; 157
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	80 72       	andi	r24, 0x20	; 32
    1b70:	90 70       	andi	r25, 0x00	; 0
    1b72:	95 95       	asr	r25
    1b74:	87 95       	ror	r24
    1b76:	95 95       	asr	r25
    1b78:	87 95       	ror	r24
    1b7a:	95 95       	asr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	95 95       	asr	r25
    1b80:	87 95       	ror	r24
    1b82:	95 95       	asr	r25
    1b84:	87 95       	ror	r24
    1b86:	98 2f       	mov	r25, r24
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	64 e0       	ldi	r22, 0x04	; 4
    1b8c:	49 2f       	mov	r20, r25
    1b8e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1b92:	fe 01       	movw	r30, r28
    1b94:	ed 59       	subi	r30, 0x9D	; 157
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	80 74       	andi	r24, 0x40	; 64
    1ba0:	90 70       	andi	r25, 0x00	; 0
    1ba2:	08 2e       	mov	r0, r24
    1ba4:	89 2f       	mov	r24, r25
    1ba6:	00 0c       	add	r0, r0
    1ba8:	88 1f       	adc	r24, r24
    1baa:	99 0b       	sbc	r25, r25
    1bac:	00 0c       	add	r0, r0
    1bae:	88 1f       	adc	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	98 2f       	mov	r25, r24
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	65 e0       	ldi	r22, 0x05	; 5
    1bb8:	49 2f       	mov	r20, r25
    1bba:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	ed 59       	subi	r30, 0x9D	; 157
    1bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc4:	80 81       	ld	r24, Z
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	99 27       	eor	r25, r25
    1bcc:	99 1f       	adc	r25, r25
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	66 e0       	ldi	r22, 0x06	; 6
    1bd2:	49 2f       	mov	r20, r25
    1bd4:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ed 5b       	subi	r30, 0xBD	; 189
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	8e 01       	movw	r16, r28
    1bf0:	01 5c       	subi	r16, 0xC1	; 193
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ed 5b       	subi	r30, 0xBD	; 189
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a e7       	ldi	r20, 0x7A	; 122
    1c08:	55 e4       	ldi	r21, 0x45	; 69
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	f8 01       	movw	r30, r16
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	ff 96       	adiw	r30, 0x3f	; 63
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9e af       	std	Y+62, r25	; 0x3e
    1c3e:	8d af       	std	Y+61, r24	; 0x3d
    1c40:	46 c0       	rjmp	.+140    	; 0x1cce <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1c42:	fe 01       	movw	r30, r28
    1c44:	ff 96       	adiw	r30, 0x3f	; 63
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	3f ef       	ldi	r19, 0xFF	; 255
    1c52:	4f e7       	ldi	r20, 0x7F	; 127
    1c54:	57 e4       	ldi	r21, 0x47	; 71
    1c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5a:	18 16       	cp	r1, r24
    1c5c:	64 f5       	brge	.+88     	; 0x1cb6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ed 5b       	subi	r30, 0xBD	; 189
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e af       	std	Y+62, r25	; 0x3e
    1c8a:	8d af       	std	Y+61, r24	; 0x3d
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <LCD_sendCommand+0x478>
    1c8e:	80 e9       	ldi	r24, 0x90	; 144
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	9c af       	std	Y+60, r25	; 0x3c
    1c94:	8b af       	std	Y+59, r24	; 0x3b
    1c96:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c98:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_sendCommand+0x466>
    1c9e:	9c af       	std	Y+60, r25	; 0x3c
    1ca0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ca4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	9e af       	std	Y+62, r25	; 0x3e
    1caa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cac:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cae:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f7       	brne	.-38     	; 0x1c8e <LCD_sendCommand+0x45a>
    1cb4:	16 c0       	rjmp	.+44     	; 0x1ce2 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	ff 96       	adiw	r30, 0x3f	; 63
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9e af       	std	Y+62, r25	; 0x3e
    1ccc:	8d af       	std	Y+61, r24	; 0x3d
    1cce:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd2:	9a af       	std	Y+58, r25	; 0x3a
    1cd4:	89 af       	std	Y+57, r24	; 0x39
    1cd6:	89 ad       	ldd	r24, Y+57	; 0x39
    1cd8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_sendCommand+0x4a6>
    1cde:	9a af       	std	Y+58, r25	; 0x3a
    1ce0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	62 e0       	ldi	r22, 0x02	; 2
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e8       	ldi	r26, 0x80	; 128
    1cf2:	bf e3       	ldi	r27, 0x3F	; 63
    1cf4:	8d ab       	std	Y+53, r24	; 0x35
    1cf6:	9e ab       	std	Y+54, r25	; 0x36
    1cf8:	af ab       	std	Y+55, r26	; 0x37
    1cfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1d00:	8f a9       	ldd	r24, Y+55	; 0x37
    1d02:	98 ad       	ldd	r25, Y+56	; 0x38
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	55 e4       	ldi	r21, 0x45	; 69
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	89 ab       	std	Y+49, r24	; 0x31
    1d16:	9a ab       	std	Y+50, r25	; 0x32
    1d18:	ab ab       	std	Y+51, r26	; 0x33
    1d1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d20:	8b a9       	ldd	r24, Y+51	; 0x33
    1d22:	9c a9       	ldd	r25, Y+52	; 0x34
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <LCD_sendCommand+0x50a>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	98 ab       	std	Y+48, r25	; 0x30
    1d3a:	8f a7       	std	Y+47, r24	; 0x2f
    1d3c:	3f c0       	rjmp	.+126    	; 0x1dbc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1d3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d40:	7a a9       	ldd	r23, Y+50	; 0x32
    1d42:	8b a9       	ldd	r24, Y+51	; 0x33
    1d44:	9c a9       	ldd	r25, Y+52	; 0x34
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	4c f5       	brge	.+82     	; 0x1da8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	6d a9       	ldd	r22, Y+53	; 0x35
    1d58:	7e a9       	ldd	r23, Y+54	; 0x36
    1d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	98 ab       	std	Y+48, r25	; 0x30
    1d7c:	8f a7       	std	Y+47, r24	; 0x2f
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <LCD_sendCommand+0x56a>
    1d80:	80 e9       	ldi	r24, 0x90	; 144
    1d82:	91 e0       	ldi	r25, 0x01	; 1
    1d84:	9e a7       	std	Y+46, r25	; 0x2e
    1d86:	8d a7       	std	Y+45, r24	; 0x2d
    1d88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_sendCommand+0x558>
    1d90:	9e a7       	std	Y+46, r25	; 0x2e
    1d92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d96:	98 a9       	ldd	r25, Y+48	; 0x30
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1da0:	98 a9       	ldd	r25, Y+48	; 0x30
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <LCD_sendCommand+0x54c>
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da8:	69 a9       	ldd	r22, Y+49	; 0x31
    1daa:	7a a9       	ldd	r23, Y+50	; 0x32
    1dac:	8b a9       	ldd	r24, Y+51	; 0x33
    1dae:	9c a9       	ldd	r25, Y+52	; 0x34
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	98 ab       	std	Y+48, r25	; 0x30
    1dba:	8f a7       	std	Y+47, r24	; 0x2f
    1dbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc0:	9c a7       	std	Y+44, r25	; 0x2c
    1dc2:	8b a7       	std	Y+43, r24	; 0x2b
    1dc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_sendCommand+0x594>
    1dcc:	9c a7       	std	Y+44, r25	; 0x2c
    1dce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	62 e0       	ldi	r22, 0x02	; 2
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e8       	ldi	r26, 0x80	; 128
    1de0:	bf e3       	ldi	r27, 0x3F	; 63
    1de2:	8f a3       	std	Y+39, r24	; 0x27
    1de4:	98 a7       	std	Y+40, r25	; 0x28
    1de6:	a9 a7       	std	Y+41, r26	; 0x29
    1de8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6f a1       	ldd	r22, Y+39	; 0x27
    1dec:	78 a5       	ldd	r23, Y+40	; 0x28
    1dee:	89 a5       	ldd	r24, Y+41	; 0x29
    1df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e7       	ldi	r20, 0x7A	; 122
    1df8:	55 e4       	ldi	r21, 0x45	; 69
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	8b a3       	std	Y+35, r24	; 0x23
    1e04:	9c a3       	std	Y+36, r25	; 0x24
    1e06:	ad a3       	std	Y+37, r26	; 0x25
    1e08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e10:	9e a1       	ldd	r25, Y+38	; 0x26
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e30:	8d a1       	ldd	r24, Y+37	; 0x25
    1e32:	9e a1       	ldd	r25, Y+38	; 0x26
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6f a1       	ldd	r22, Y+39	; 0x27
    1e46:	78 a5       	ldd	r23, Y+40	; 0x28
    1e48:	89 a5       	ldd	r24, Y+41	; 0x29
    1e4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9a a3       	std	Y+34, r25	; 0x22
    1e6a:	89 a3       	std	Y+33, r24	; 0x21
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <LCD_sendCommand+0x658>
    1e6e:	80 e9       	ldi	r24, 0x90	; 144
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	98 a3       	std	Y+32, r25	; 0x20
    1e74:	8f 8f       	std	Y+31, r24	; 0x1f
    1e76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e78:	98 a1       	ldd	r25, Y+32	; 0x20
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_sendCommand+0x646>
    1e7e:	98 a3       	std	Y+32, r25	; 0x20
    1e80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	9a a3       	std	Y+34, r25	; 0x22
    1e8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <LCD_sendCommand+0x63a>
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	6b a1       	ldd	r22, Y+35	; 0x23
    1e98:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9a a3       	std	Y+34, r25	; 0x22
    1ea8:	89 a3       	std	Y+33, r24	; 0x21
    1eaa:	89 a1       	ldd	r24, Y+33	; 0x21
    1eac:	9a a1       	ldd	r25, Y+34	; 0x22
    1eae:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb0:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_sendCommand+0x682>
    1eba:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ed 59       	subi	r30, 0x9D	; 157
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	91 70       	andi	r25, 0x01	; 1
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	63 e0       	ldi	r22, 0x03	; 3
    1ece:	49 2f       	mov	r20, r25
    1ed0:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	ed 59       	subi	r30, 0x9D	; 157
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	82 70       	andi	r24, 0x02	; 2
    1ee2:	90 70       	andi	r25, 0x00	; 0
    1ee4:	95 95       	asr	r25
    1ee6:	87 95       	ror	r24
    1ee8:	98 2f       	mov	r25, r24
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	64 e0       	ldi	r22, 0x04	; 4
    1eee:	49 2f       	mov	r20, r25
    1ef0:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ed 59       	subi	r30, 0x9D	; 157
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	84 70       	andi	r24, 0x04	; 4
    1f02:	90 70       	andi	r25, 0x00	; 0
    1f04:	95 95       	asr	r25
    1f06:	87 95       	ror	r24
    1f08:	95 95       	asr	r25
    1f0a:	87 95       	ror	r24
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	65 e0       	ldi	r22, 0x05	; 5
    1f12:	49 2f       	mov	r20, r25
    1f14:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 59       	subi	r30, 0x9D	; 157
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 2f       	mov	r24, r24
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	88 70       	andi	r24, 0x08	; 8
    1f26:	90 70       	andi	r25, 0x00	; 0
    1f28:	95 95       	asr	r25
    1f2a:	87 95       	ror	r24
    1f2c:	95 95       	asr	r25
    1f2e:	87 95       	ror	r24
    1f30:	95 95       	asr	r25
    1f32:	87 95       	ror	r24
    1f34:	98 2f       	mov	r25, r24
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	66 e0       	ldi	r22, 0x06	; 6
    1f3a:	49 2f       	mov	r20, r25
    1f3c:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	89 8f       	std	Y+25, r24	; 0x19
    1f4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	55 e4       	ldi	r21, 0x45	; 69
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8d 8b       	std	Y+21, r24	; 0x15
    1f6a:	9e 8b       	std	Y+22, r25	; 0x16
    1f6c:	af 8b       	std	Y+23, r26	; 0x17
    1f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f70:	6d 89       	ldd	r22, Y+21	; 0x15
    1f72:	7e 89       	ldd	r23, Y+22	; 0x16
    1f74:	8f 89       	ldd	r24, Y+23	; 0x17
    1f76:	98 8d       	ldd	r25, Y+24	; 0x18
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1f92:	6d 89       	ldd	r22, Y+21	; 0x15
    1f94:	7e 89       	ldd	r23, Y+22	; 0x16
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_sendCommand+0x7be>
    1fd4:	80 e9       	ldi	r24, 0x90	; 144
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	89 8b       	std	Y+17, r24	; 0x11
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_sendCommand+0x7ac>
    1fe4:	9a 8b       	std	Y+18, r25	; 0x12
    1fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fea:	9c 89       	ldd	r25, Y+20	; 0x14
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_sendCommand+0x7a0>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	8b 89       	ldd	r24, Y+19	; 0x13
    2012:	9c 89       	ldd	r25, Y+20	; 0x14
    2014:	98 8b       	std	Y+16, r25	; 0x10
    2016:	8f 87       	std	Y+15, r24	; 0x0f
    2018:	8f 85       	ldd	r24, Y+15	; 0x0f
    201a:	98 89       	ldd	r25, Y+16	; 0x10
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_sendCommand+0x7e8>
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	62 e0       	ldi	r22, 0x02	; 2
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e8       	ldi	r26, 0x80	; 128
    2034:	bf e3       	ldi	r27, 0x3F	; 63
    2036:	8b 87       	std	Y+11, r24	; 0x0b
    2038:	9c 87       	std	Y+12, r25	; 0x0c
    203a:	ad 87       	std	Y+13, r26	; 0x0d
    203c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a e7       	ldi	r20, 0x7A	; 122
    204c:	55 e4       	ldi	r21, 0x45	; 69
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8f 83       	std	Y+7, r24	; 0x07
    2058:	98 87       	std	Y+8, r25	; 0x08
    205a:	a9 87       	std	Y+9, r26	; 0x09
    205c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_sendCommand+0x8ac>
    20c2:	80 e9       	ldi	r24, 0x90	; 144
    20c4:	91 e0       	ldi	r25, 0x01	; 1
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_sendCommand+0x89a>
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_sendCommand+0x88e>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_sendCommand+0x8d6>
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2112:	cd 59       	subi	r28, 0x9D	; 157
    2114:	df 4f       	sbci	r29, 0xFF	; 255
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	08 95       	ret

0000212a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	c3 56       	subi	r28, 0x63	; 99
    2138:	d0 40       	sbci	r29, 0x00	; 0
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	fe 01       	movw	r30, r28
    2146:	ed 59       	subi	r30, 0x9D	; 157
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	61 e0       	ldi	r22, 0x01	; 1
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2156:	fe 01       	movw	r30, r28
    2158:	e1 5a       	subi	r30, 0xA1	; 161
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e8       	ldi	r26, 0x80	; 128
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	80 83       	st	Z, r24
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	a2 83       	std	Z+2, r26	; 0x02
    216a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	8e 01       	movw	r16, r28
    216e:	05 5a       	subi	r16, 0xA5	; 165
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	fe 01       	movw	r30, r28
    2174:	e1 5a       	subi	r30, 0xA1	; 161
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4a e7       	ldi	r20, 0x7A	; 122
    2186:	55 e4       	ldi	r21, 0x45	; 69
    2188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	80 83       	st	Z, r24
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	a2 83       	std	Z+2, r26	; 0x02
    2198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219a:	fe 01       	movw	r30, r28
    219c:	e5 5a       	subi	r30, 0xA5	; 165
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e8       	ldi	r20, 0x80	; 128
    21ae:	5f e3       	ldi	r21, 0x3F	; 63
    21b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	44 f4       	brge	.+16     	; 0x21c8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    21b8:	fe 01       	movw	r30, r28
    21ba:	e7 5a       	subi	r30, 0xA7	; 167
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	64 c0       	rjmp	.+200    	; 0x2290 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    21c8:	fe 01       	movw	r30, r28
    21ca:	e5 5a       	subi	r30, 0xA5	; 165
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <LCD_displayCharacter+0xbe>
    21e6:	43 c0       	rjmp	.+134    	; 0x226e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	fe 01       	movw	r30, r28
    21ea:	e1 5a       	subi	r30, 0xA1	; 161
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8e 01       	movw	r16, r28
    2208:	07 5a       	subi	r16, 0xA7	; 167
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	f8 01       	movw	r30, r16
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	1f c0       	rjmp	.+62     	; 0x225e <LCD_displayCharacter+0x134>
    2220:	fe 01       	movw	r30, r28
    2222:	e9 5a       	subi	r30, 0xA9	; 169
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 e9       	ldi	r24, 0x90	; 144
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	91 83       	std	Z+1, r25	; 0x01
    222c:	80 83       	st	Z, r24
    222e:	fe 01       	movw	r30, r28
    2230:	e9 5a       	subi	r30, 0xA9	; 169
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_displayCharacter+0x10e>
    223c:	fe 01       	movw	r30, r28
    223e:	e9 5a       	subi	r30, 0xA9	; 169
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	de 01       	movw	r26, r28
    2248:	a7 5a       	subi	r26, 0xA7	; 167
    224a:	bf 4f       	sbci	r27, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	e7 5a       	subi	r30, 0xA7	; 167
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	11 96       	adiw	r26, 0x01	; 1
    225a:	9c 93       	st	X, r25
    225c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	fe 01       	movw	r30, r28
    2260:	e7 5a       	subi	r30, 0xA7	; 167
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	d1 f6       	brne	.-76     	; 0x2220 <LCD_displayCharacter+0xf6>
    226c:	27 c0       	rjmp	.+78     	; 0x22bc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	8e 01       	movw	r16, r28
    2270:	07 5a       	subi	r16, 0xA7	; 167
    2272:	1f 4f       	sbci	r17, 0xFF	; 255
    2274:	fe 01       	movw	r30, r28
    2276:	e5 5a       	subi	r30, 0xA5	; 165
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	f8 01       	movw	r30, r16
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	80 83       	st	Z, r24
    2290:	de 01       	movw	r26, r28
    2292:	ab 5a       	subi	r26, 0xAB	; 171
    2294:	bf 4f       	sbci	r27, 0xFF	; 255
    2296:	fe 01       	movw	r30, r28
    2298:	e7 5a       	subi	r30, 0xA7	; 167
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	8d 93       	st	X+, r24
    22a2:	9c 93       	st	X, r25
    22a4:	fe 01       	movw	r30, r28
    22a6:	eb 5a       	subi	r30, 0xAB	; 171
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_displayCharacter+0x184>
    22b2:	fe 01       	movw	r30, r28
    22b4:	eb 5a       	subi	r30, 0xAB	; 171
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	62 e0       	ldi	r22, 0x02	; 2
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    22c6:	fe 01       	movw	r30, r28
    22c8:	ef 5a       	subi	r30, 0xAF	; 175
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e8       	ldi	r26, 0x80	; 128
    22d2:	bf e3       	ldi	r27, 0x3F	; 63
    22d4:	80 83       	st	Z, r24
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	a2 83       	std	Z+2, r26	; 0x02
    22da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	8e 01       	movw	r16, r28
    22de:	03 5b       	subi	r16, 0xB3	; 179
    22e0:	1f 4f       	sbci	r17, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	ef 5a       	subi	r30, 0xAF	; 175
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	55 e4       	ldi	r21, 0x45	; 69
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	f8 01       	movw	r30, r16
    2302:	80 83       	st	Z, r24
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	a2 83       	std	Z+2, r26	; 0x02
    2308:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    230a:	fe 01       	movw	r30, r28
    230c:	e3 5b       	subi	r30, 0xB3	; 179
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	60 81       	ld	r22, Z
    2312:	71 81       	ldd	r23, Z+1	; 0x01
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	93 81       	ldd	r25, Z+3	; 0x03
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	44 f4       	brge	.+16     	; 0x2338 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2328:	fe 01       	movw	r30, r28
    232a:	e5 5b       	subi	r30, 0xB5	; 181
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	64 c0       	rjmp	.+200    	; 0x2400 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2338:	fe 01       	movw	r30, r28
    233a:	e3 5b       	subi	r30, 0xB3	; 179
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	3f ef       	ldi	r19, 0xFF	; 255
    234a:	4f e7       	ldi	r20, 0x7F	; 127
    234c:	57 e4       	ldi	r21, 0x47	; 71
    234e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2352:	18 16       	cp	r1, r24
    2354:	0c f0       	brlt	.+2      	; 0x2358 <LCD_displayCharacter+0x22e>
    2356:	43 c0       	rjmp	.+134    	; 0x23de <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	fe 01       	movw	r30, r28
    235a:	ef 5a       	subi	r30, 0xAF	; 175
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	60 81       	ld	r22, Z
    2360:	71 81       	ldd	r23, Z+1	; 0x01
    2362:	82 81       	ldd	r24, Z+2	; 0x02
    2364:	93 81       	ldd	r25, Z+3	; 0x03
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e2       	ldi	r20, 0x20	; 32
    236c:	51 e4       	ldi	r21, 0x41	; 65
    236e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	8e 01       	movw	r16, r28
    2378:	05 5b       	subi	r16, 0xB5	; 181
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <LCD_displayCharacter+0x2a4>
    2390:	fe 01       	movw	r30, r28
    2392:	e7 5b       	subi	r30, 0xB7	; 183
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 e9       	ldi	r24, 0x90	; 144
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 5b       	subi	r30, 0xB7	; 183
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	80 81       	ld	r24, Z
    23a6:	91 81       	ldd	r25, Z+1	; 0x01
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_displayCharacter+0x27e>
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 5b       	subi	r30, 0xB7	; 183
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	de 01       	movw	r26, r28
    23b8:	a5 5b       	subi	r26, 0xB5	; 181
    23ba:	bf 4f       	sbci	r27, 0xFF	; 255
    23bc:	fe 01       	movw	r30, r28
    23be:	e5 5b       	subi	r30, 0xB5	; 181
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	9c 93       	st	X, r25
    23cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 5b       	subi	r30, 0xB5	; 181
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	91 81       	ldd	r25, Z+1	; 0x01
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	d1 f6       	brne	.-76     	; 0x2390 <LCD_displayCharacter+0x266>
    23dc:	27 c0       	rjmp	.+78     	; 0x242c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23de:	8e 01       	movw	r16, r28
    23e0:	05 5b       	subi	r16, 0xB5	; 181
    23e2:	1f 4f       	sbci	r17, 0xFF	; 255
    23e4:	fe 01       	movw	r30, r28
    23e6:	e3 5b       	subi	r30, 0xB3	; 179
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	60 81       	ld	r22, Z
    23ec:	71 81       	ldd	r23, Z+1	; 0x01
    23ee:	82 81       	ldd	r24, Z+2	; 0x02
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	de 01       	movw	r26, r28
    2402:	a9 5b       	subi	r26, 0xB9	; 185
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e5 5b       	subi	r30, 0xB5	; 181
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	8d 93       	st	X+, r24
    2412:	9c 93       	st	X, r25
    2414:	fe 01       	movw	r30, r28
    2416:	e9 5b       	subi	r30, 0xB9	; 185
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	91 81       	ldd	r25, Z+1	; 0x01
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0x2f4>
    2422:	fe 01       	movw	r30, r28
    2424:	e9 5b       	subi	r30, 0xB9	; 185
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    242c:	fe 01       	movw	r30, r28
    242e:	ed 59       	subi	r30, 0x9D	; 157
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	80 71       	andi	r24, 0x10	; 16
    243a:	90 70       	andi	r25, 0x00	; 0
    243c:	95 95       	asr	r25
    243e:	87 95       	ror	r24
    2440:	95 95       	asr	r25
    2442:	87 95       	ror	r24
    2444:	95 95       	asr	r25
    2446:	87 95       	ror	r24
    2448:	95 95       	asr	r25
    244a:	87 95       	ror	r24
    244c:	98 2f       	mov	r25, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	63 e0       	ldi	r22, 0x03	; 3
    2452:	49 2f       	mov	r20, r25
    2454:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2458:	fe 01       	movw	r30, r28
    245a:	ed 59       	subi	r30, 0x9D	; 157
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 81       	ld	r24, Z
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	80 72       	andi	r24, 0x20	; 32
    2466:	90 70       	andi	r25, 0x00	; 0
    2468:	95 95       	asr	r25
    246a:	87 95       	ror	r24
    246c:	95 95       	asr	r25
    246e:	87 95       	ror	r24
    2470:	95 95       	asr	r25
    2472:	87 95       	ror	r24
    2474:	95 95       	asr	r25
    2476:	87 95       	ror	r24
    2478:	95 95       	asr	r25
    247a:	87 95       	ror	r24
    247c:	98 2f       	mov	r25, r24
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	64 e0       	ldi	r22, 0x04	; 4
    2482:	49 2f       	mov	r20, r25
    2484:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2488:	fe 01       	movw	r30, r28
    248a:	ed 59       	subi	r30, 0x9D	; 157
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	80 74       	andi	r24, 0x40	; 64
    2496:	90 70       	andi	r25, 0x00	; 0
    2498:	08 2e       	mov	r0, r24
    249a:	89 2f       	mov	r24, r25
    249c:	00 0c       	add	r0, r0
    249e:	88 1f       	adc	r24, r24
    24a0:	99 0b       	sbc	r25, r25
    24a2:	00 0c       	add	r0, r0
    24a4:	88 1f       	adc	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	98 2f       	mov	r25, r24
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	65 e0       	ldi	r22, 0x05	; 5
    24ae:	49 2f       	mov	r20, r25
    24b0:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 59       	subi	r30, 0x9D	; 157
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	98 2f       	mov	r25, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	99 27       	eor	r25, r25
    24c2:	99 1f       	adc	r25, r25
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	66 e0       	ldi	r22, 0x06	; 6
    24c8:	49 2f       	mov	r20, r25
    24ca:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    24ce:	fe 01       	movw	r30, r28
    24d0:	ed 5b       	subi	r30, 0xBD	; 189
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a0 e8       	ldi	r26, 0x80	; 128
    24da:	bf e3       	ldi	r27, 0x3F	; 63
    24dc:	80 83       	st	Z, r24
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	a2 83       	std	Z+2, r26	; 0x02
    24e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e4:	8e 01       	movw	r16, r28
    24e6:	01 5c       	subi	r16, 0xC1	; 193
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 5b       	subi	r30, 0xBD	; 189
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	4a e7       	ldi	r20, 0x7A	; 122
    24fe:	55 e4       	ldi	r21, 0x45	; 69
    2500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	f8 01       	movw	r30, r16
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2512:	fe 01       	movw	r30, r28
    2514:	ff 96       	adiw	r30, 0x3f	; 63
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	2c f4       	brge	.+10     	; 0x2538 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9e af       	std	Y+62, r25	; 0x3e
    2534:	8d af       	std	Y+61, r24	; 0x3d
    2536:	46 c0       	rjmp	.+140    	; 0x25c4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2538:	fe 01       	movw	r30, r28
    253a:	ff 96       	adiw	r30, 0x3f	; 63
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	64 f5       	brge	.+88     	; 0x25ac <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	fe 01       	movw	r30, r28
    2556:	ed 5b       	subi	r30, 0xBD	; 189
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e af       	std	Y+62, r25	; 0x3e
    2580:	8d af       	std	Y+61, r24	; 0x3d
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_displayCharacter+0x478>
    2584:	80 e9       	ldi	r24, 0x90	; 144
    2586:	91 e0       	ldi	r25, 0x01	; 1
    2588:	9c af       	std	Y+60, r25	; 0x3c
    258a:	8b af       	std	Y+59, r24	; 0x3b
    258c:	8b ad       	ldd	r24, Y+59	; 0x3b
    258e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_displayCharacter+0x466>
    2594:	9c af       	std	Y+60, r25	; 0x3c
    2596:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8d ad       	ldd	r24, Y+61	; 0x3d
    259a:	9e ad       	ldd	r25, Y+62	; 0x3e
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9e af       	std	Y+62, r25	; 0x3e
    25a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <LCD_displayCharacter+0x45a>
    25aa:	16 c0       	rjmp	.+44     	; 0x25d8 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	fe 01       	movw	r30, r28
    25ae:	ff 96       	adiw	r30, 0x3f	; 63
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e af       	std	Y+62, r25	; 0x3e
    25c2:	8d af       	std	Y+61, r24	; 0x3d
    25c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c8:	9a af       	std	Y+58, r25	; 0x3a
    25ca:	89 af       	std	Y+57, r24	; 0x39
    25cc:	89 ad       	ldd	r24, Y+57	; 0x39
    25ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_displayCharacter+0x4a6>
    25d4:	9a af       	std	Y+58, r25	; 0x3a
    25d6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	62 e0       	ldi	r22, 0x02	; 2
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	a0 e8       	ldi	r26, 0x80	; 128
    25e8:	bf e3       	ldi	r27, 0x3F	; 63
    25ea:	8d ab       	std	Y+53, r24	; 0x35
    25ec:	9e ab       	std	Y+54, r25	; 0x36
    25ee:	af ab       	std	Y+55, r26	; 0x37
    25f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f2:	6d a9       	ldd	r22, Y+53	; 0x35
    25f4:	7e a9       	ldd	r23, Y+54	; 0x36
    25f6:	8f a9       	ldd	r24, Y+55	; 0x37
    25f8:	98 ad       	ldd	r25, Y+56	; 0x38
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a e7       	ldi	r20, 0x7A	; 122
    2600:	55 e4       	ldi	r21, 0x45	; 69
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	89 ab       	std	Y+49, r24	; 0x31
    260c:	9a ab       	std	Y+50, r25	; 0x32
    260e:	ab ab       	std	Y+51, r26	; 0x33
    2610:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2612:	69 a9       	ldd	r22, Y+49	; 0x31
    2614:	7a a9       	ldd	r23, Y+50	; 0x32
    2616:	8b a9       	ldd	r24, Y+51	; 0x33
    2618:	9c a9       	ldd	r25, Y+52	; 0x34
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e8       	ldi	r20, 0x80	; 128
    2620:	5f e3       	ldi	r21, 0x3F	; 63
    2622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2626:	88 23       	and	r24, r24
    2628:	2c f4       	brge	.+10     	; 0x2634 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	98 ab       	std	Y+48, r25	; 0x30
    2630:	8f a7       	std	Y+47, r24	; 0x2f
    2632:	3f c0       	rjmp	.+126    	; 0x26b2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2634:	69 a9       	ldd	r22, Y+49	; 0x31
    2636:	7a a9       	ldd	r23, Y+50	; 0x32
    2638:	8b a9       	ldd	r24, Y+51	; 0x33
    263a:	9c a9       	ldd	r25, Y+52	; 0x34
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	4c f5       	brge	.+82     	; 0x269e <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	6d a9       	ldd	r22, Y+53	; 0x35
    264e:	7e a9       	ldd	r23, Y+54	; 0x36
    2650:	8f a9       	ldd	r24, Y+55	; 0x37
    2652:	98 ad       	ldd	r25, Y+56	; 0x38
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	98 ab       	std	Y+48, r25	; 0x30
    2672:	8f a7       	std	Y+47, r24	; 0x2f
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <LCD_displayCharacter+0x56a>
    2676:	80 e9       	ldi	r24, 0x90	; 144
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	9e a7       	std	Y+46, r25	; 0x2e
    267c:	8d a7       	std	Y+45, r24	; 0x2d
    267e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2680:	9e a5       	ldd	r25, Y+46	; 0x2e
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_displayCharacter+0x558>
    2686:	9e a7       	std	Y+46, r25	; 0x2e
    2688:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8f a5       	ldd	r24, Y+47	; 0x2f
    268c:	98 a9       	ldd	r25, Y+48	; 0x30
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	98 ab       	std	Y+48, r25	; 0x30
    2692:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8f a5       	ldd	r24, Y+47	; 0x2f
    2696:	98 a9       	ldd	r25, Y+48	; 0x30
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <LCD_displayCharacter+0x54c>
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	69 a9       	ldd	r22, Y+49	; 0x31
    26a0:	7a a9       	ldd	r23, Y+50	; 0x32
    26a2:	8b a9       	ldd	r24, Y+51	; 0x33
    26a4:	9c a9       	ldd	r25, Y+52	; 0x34
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	98 ab       	std	Y+48, r25	; 0x30
    26b0:	8f a7       	std	Y+47, r24	; 0x2f
    26b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b4:	98 a9       	ldd	r25, Y+48	; 0x30
    26b6:	9c a7       	std	Y+44, r25	; 0x2c
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
    26ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    26bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <LCD_displayCharacter+0x594>
    26c2:	9c a7       	std	Y+44, r25	; 0x2c
    26c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	62 e0       	ldi	r22, 0x02	; 2
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	a0 e8       	ldi	r26, 0x80	; 128
    26d6:	bf e3       	ldi	r27, 0x3F	; 63
    26d8:	8f a3       	std	Y+39, r24	; 0x27
    26da:	98 a7       	std	Y+40, r25	; 0x28
    26dc:	a9 a7       	std	Y+41, r26	; 0x29
    26de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	6f a1       	ldd	r22, Y+39	; 0x27
    26e2:	78 a5       	ldd	r23, Y+40	; 0x28
    26e4:	89 a5       	ldd	r24, Y+41	; 0x29
    26e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a e7       	ldi	r20, 0x7A	; 122
    26ee:	55 e4       	ldi	r21, 0x45	; 69
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	8b a3       	std	Y+35, r24	; 0x23
    26fa:	9c a3       	std	Y+36, r25	; 0x24
    26fc:	ad a3       	std	Y+37, r26	; 0x25
    26fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2700:	6b a1       	ldd	r22, Y+35	; 0x23
    2702:	7c a1       	ldd	r23, Y+36	; 0x24
    2704:	8d a1       	ldd	r24, Y+37	; 0x25
    2706:	9e a1       	ldd	r25, Y+38	; 0x26
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e8       	ldi	r20, 0x80	; 128
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2714:	88 23       	and	r24, r24
    2716:	2c f4       	brge	.+10     	; 0x2722 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9a a3       	std	Y+34, r25	; 0x22
    271e:	89 a3       	std	Y+33, r24	; 0x21
    2720:	3f c0       	rjmp	.+126    	; 0x27a0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2722:	6b a1       	ldd	r22, Y+35	; 0x23
    2724:	7c a1       	ldd	r23, Y+36	; 0x24
    2726:	8d a1       	ldd	r24, Y+37	; 0x25
    2728:	9e a1       	ldd	r25, Y+38	; 0x26
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	57 e4       	ldi	r21, 0x47	; 71
    2732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	4c f5       	brge	.+82     	; 0x278c <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	6f a1       	ldd	r22, Y+39	; 0x27
    273c:	78 a5       	ldd	r23, Y+40	; 0x28
    273e:	89 a5       	ldd	r24, Y+41	; 0x29
    2740:	9a a5       	ldd	r25, Y+42	; 0x2a
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	51 e4       	ldi	r21, 0x41	; 65
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9a a3       	std	Y+34, r25	; 0x22
    2760:	89 a3       	std	Y+33, r24	; 0x21
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <LCD_displayCharacter+0x658>
    2764:	80 e9       	ldi	r24, 0x90	; 144
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	98 a3       	std	Y+32, r25	; 0x20
    276a:	8f 8f       	std	Y+31, r24	; 0x1f
    276c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    276e:	98 a1       	ldd	r25, Y+32	; 0x20
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_displayCharacter+0x646>
    2774:	98 a3       	std	Y+32, r25	; 0x20
    2776:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	89 a1       	ldd	r24, Y+33	; 0x21
    277a:	9a a1       	ldd	r25, Y+34	; 0x22
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	89 a1       	ldd	r24, Y+33	; 0x21
    2784:	9a a1       	ldd	r25, Y+34	; 0x22
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	69 f7       	brne	.-38     	; 0x2764 <LCD_displayCharacter+0x63a>
    278a:	14 c0       	rjmp	.+40     	; 0x27b4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	6b a1       	ldd	r22, Y+35	; 0x23
    278e:	7c a1       	ldd	r23, Y+36	; 0x24
    2790:	8d a1       	ldd	r24, Y+37	; 0x25
    2792:	9e a1       	ldd	r25, Y+38	; 0x26
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9a a3       	std	Y+34, r25	; 0x22
    279e:	89 a3       	std	Y+33, r24	; 0x21
    27a0:	89 a1       	ldd	r24, Y+33	; 0x21
    27a2:	9a a1       	ldd	r25, Y+34	; 0x22
    27a4:	9e 8f       	std	Y+30, r25	; 0x1e
    27a6:	8d 8f       	std	Y+29, r24	; 0x1d
    27a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_displayCharacter+0x682>
    27b0:	9e 8f       	std	Y+30, r25	; 0x1e
    27b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    27b4:	fe 01       	movw	r30, r28
    27b6:	ed 59       	subi	r30, 0x9D	; 157
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	98 2f       	mov	r25, r24
    27be:	91 70       	andi	r25, 0x01	; 1
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	63 e0       	ldi	r22, 0x03	; 3
    27c4:	49 2f       	mov	r20, r25
    27c6:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    27ca:	fe 01       	movw	r30, r28
    27cc:	ed 59       	subi	r30, 0x9D	; 157
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	82 70       	andi	r24, 0x02	; 2
    27d8:	90 70       	andi	r25, 0x00	; 0
    27da:	95 95       	asr	r25
    27dc:	87 95       	ror	r24
    27de:	98 2f       	mov	r25, r24
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	64 e0       	ldi	r22, 0x04	; 4
    27e4:	49 2f       	mov	r20, r25
    27e6:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 59       	subi	r30, 0x9D	; 157
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	88 2f       	mov	r24, r24
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	84 70       	andi	r24, 0x04	; 4
    27f8:	90 70       	andi	r25, 0x00	; 0
    27fa:	95 95       	asr	r25
    27fc:	87 95       	ror	r24
    27fe:	95 95       	asr	r25
    2800:	87 95       	ror	r24
    2802:	98 2f       	mov	r25, r24
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	65 e0       	ldi	r22, 0x05	; 5
    2808:	49 2f       	mov	r20, r25
    280a:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    280e:	fe 01       	movw	r30, r28
    2810:	ed 59       	subi	r30, 0x9D	; 157
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	88 70       	andi	r24, 0x08	; 8
    281c:	90 70       	andi	r25, 0x00	; 0
    281e:	95 95       	asr	r25
    2820:	87 95       	ror	r24
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	95 95       	asr	r25
    2828:	87 95       	ror	r24
    282a:	98 2f       	mov	r25, r24
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	66 e0       	ldi	r22, 0x06	; 6
    2830:	49 2f       	mov	r20, r25
    2832:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	a0 e8       	ldi	r26, 0x80	; 128
    283c:	bf e3       	ldi	r27, 0x3F	; 63
    283e:	89 8f       	std	Y+25, r24	; 0x19
    2840:	9a 8f       	std	Y+26, r25	; 0x1a
    2842:	ab 8f       	std	Y+27, r26	; 0x1b
    2844:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2846:	69 8d       	ldd	r22, Y+25	; 0x19
    2848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    284c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	4a e7       	ldi	r20, 0x7A	; 122
    2854:	55 e4       	ldi	r21, 0x45	; 69
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8d 8b       	std	Y+21, r24	; 0x15
    2860:	9e 8b       	std	Y+22, r25	; 0x16
    2862:	af 8b       	std	Y+23, r26	; 0x17
    2864:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	2c f4       	brge	.+10     	; 0x2888 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9c 8b       	std	Y+20, r25	; 0x14
    2884:	8b 8b       	std	Y+19, r24	; 0x13
    2886:	3f c0       	rjmp	.+126    	; 0x2906 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2888:	6d 89       	ldd	r22, Y+21	; 0x15
    288a:	7e 89       	ldd	r23, Y+22	; 0x16
    288c:	8f 89       	ldd	r24, Y+23	; 0x17
    288e:	98 8d       	ldd	r25, Y+24	; 0x18
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	4c f5       	brge	.+82     	; 0x28f2 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a0:	69 8d       	ldd	r22, Y+25	; 0x19
    28a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e2       	ldi	r20, 0x20	; 32
    28ae:	51 e4       	ldi	r21, 0x41	; 65
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
    28c8:	0f c0       	rjmp	.+30     	; 0x28e8 <LCD_displayCharacter+0x7be>
    28ca:	80 e9       	ldi	r24, 0x90	; 144
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	9a 8b       	std	Y+18, r25	; 0x12
    28d0:	89 8b       	std	Y+17, r24	; 0x11
    28d2:	89 89       	ldd	r24, Y+17	; 0x11
    28d4:	9a 89       	ldd	r25, Y+18	; 0x12
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	f1 f7       	brne	.-4      	; 0x28d6 <LCD_displayCharacter+0x7ac>
    28da:	9a 8b       	std	Y+18, r25	; 0x12
    28dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28de:	8b 89       	ldd	r24, Y+19	; 0x13
    28e0:	9c 89       	ldd	r25, Y+20	; 0x14
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	9c 8b       	std	Y+20, r25	; 0x14
    28e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	69 f7       	brne	.-38     	; 0x28ca <LCD_displayCharacter+0x7a0>
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f2:	6d 89       	ldd	r22, Y+21	; 0x15
    28f4:	7e 89       	ldd	r23, Y+22	; 0x16
    28f6:	8f 89       	ldd	r24, Y+23	; 0x17
    28f8:	98 8d       	ldd	r25, Y+24	; 0x18
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
    2906:	8b 89       	ldd	r24, Y+19	; 0x13
    2908:	9c 89       	ldd	r25, Y+20	; 0x14
    290a:	98 8b       	std	Y+16, r25	; 0x10
    290c:	8f 87       	std	Y+15, r24	; 0x0f
    290e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2910:	98 89       	ldd	r25, Y+16	; 0x10
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <LCD_displayCharacter+0x7e8>
    2916:	98 8b       	std	Y+16, r25	; 0x10
    2918:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	62 e0       	ldi	r22, 0x02	; 2
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a0 e8       	ldi	r26, 0x80	; 128
    292a:	bf e3       	ldi	r27, 0x3F	; 63
    292c:	8b 87       	std	Y+11, r24	; 0x0b
    292e:	9c 87       	std	Y+12, r25	; 0x0c
    2930:	ad 87       	std	Y+13, r26	; 0x0d
    2932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2934:	6b 85       	ldd	r22, Y+11	; 0x0b
    2936:	7c 85       	ldd	r23, Y+12	; 0x0c
    2938:	8d 85       	ldd	r24, Y+13	; 0x0d
    293a:	9e 85       	ldd	r25, Y+14	; 0x0e
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a e7       	ldi	r20, 0x7A	; 122
    2942:	55 e4       	ldi	r21, 0x45	; 69
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8f 83       	std	Y+7, r24	; 0x07
    294e:	98 87       	std	Y+8, r25	; 0x08
    2950:	a9 87       	std	Y+9, r26	; 0x09
    2952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e8       	ldi	r20, 0x80	; 128
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2968:	88 23       	and	r24, r24
    296a:	2c f4       	brge	.+10     	; 0x2976 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9e 83       	std	Y+6, r25	; 0x06
    2972:	8d 83       	std	Y+5, r24	; 0x05
    2974:	3f c0       	rjmp	.+126    	; 0x29f4 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2976:	6f 81       	ldd	r22, Y+7	; 0x07
    2978:	78 85       	ldd	r23, Y+8	; 0x08
    297a:	89 85       	ldd	r24, Y+9	; 0x09
    297c:	9a 85       	ldd	r25, Y+10	; 0x0a
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	3f ef       	ldi	r19, 0xFF	; 255
    2982:	4f e7       	ldi	r20, 0x7F	; 127
    2984:	57 e4       	ldi	r21, 0x47	; 71
    2986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298a:	18 16       	cp	r1, r24
    298c:	4c f5       	brge	.+82     	; 0x29e0 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2990:	7c 85       	ldd	r23, Y+12	; 0x0c
    2992:	8d 85       	ldd	r24, Y+13	; 0x0d
    2994:	9e 85       	ldd	r25, Y+14	; 0x0e
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e2       	ldi	r20, 0x20	; 32
    299c:	51 e4       	ldi	r21, 0x41	; 65
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9e 83       	std	Y+6, r25	; 0x06
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <LCD_displayCharacter+0x8ac>
    29b8:	80 e9       	ldi	r24, 0x90	; 144
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	9c 83       	std	Y+4, r25	; 0x04
    29be:	8b 83       	std	Y+3, r24	; 0x03
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	9c 81       	ldd	r25, Y+4	; 0x04
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_displayCharacter+0x89a>
    29c8:	9c 83       	std	Y+4, r25	; 0x04
    29ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <LCD_displayCharacter+0x88e>
    29de:	14 c0       	rjmp	.+40     	; 0x2a08 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	6f 81       	ldd	r22, Y+7	; 0x07
    29e2:	78 85       	ldd	r23, Y+8	; 0x08
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9e 83       	std	Y+6, r25	; 0x06
    29f2:	8d 83       	std	Y+5, r24	; 0x05
    29f4:	8d 81       	ldd	r24, Y+5	; 0x05
    29f6:	9e 81       	ldd	r25, Y+6	; 0x06
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_displayCharacter+0x8d6>
    2a04:	9a 83       	std	Y+2, r25	; 0x02
    2a06:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a08:	cd 59       	subi	r28, 0x9D	; 157
    2a0a:	df 4f       	sbci	r29, 0xFF	; 255
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	08 95       	ret

00002a20 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <LCD_displayString+0x6>
    2a26:	0f 92       	push	r0
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	9b 83       	std	Y+3, r25	; 0x03
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a30:	19 82       	std	Y+1, r1	; 0x01
    2a32:	0e c0       	rjmp	.+28     	; 0x2a50 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3e:	fc 01       	movw	r30, r24
    2a40:	e2 0f       	add	r30, r18
    2a42:	f3 1f       	adc	r31, r19
    2a44:	80 81       	ld	r24, Z
    2a46:	0e 94 95 10 	call	0x212a	; 0x212a <LCD_displayCharacter>
		i++;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	8f 5f       	subi	r24, 0xFF	; 255
    2a4e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	80 81       	ld	r24, Z
    2a62:	88 23       	and	r24, r24
    2a64:	39 f7       	brne	.-50     	; 0x2a34 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <LCD_moveCursor+0x6>
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <LCD_moveCursor+0x8>
    2a7a:	0f 92       	push	r0
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	8a 83       	std	Y+2, r24	; 0x02
    2a82:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	3d 83       	std	Y+5, r19	; 0x05
    2a8c:	2c 83       	std	Y+4, r18	; 0x04
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9d 81       	ldd	r25, Y+5	; 0x05
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	91 05       	cpc	r25, r1
    2a96:	c1 f0       	breq	.+48     	; 0x2ac8 <LCD_moveCursor+0x56>
    2a98:	2c 81       	ldd	r18, Y+4	; 0x04
    2a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a9c:	22 30       	cpi	r18, 0x02	; 2
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <LCD_moveCursor+0x3a>
    2aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	61 f0       	breq	.+24     	; 0x2ac2 <LCD_moveCursor+0x50>
    2aaa:	19 c0       	rjmp	.+50     	; 0x2ade <LCD_moveCursor+0x6c>
    2aac:	2c 81       	ldd	r18, Y+4	; 0x04
    2aae:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab0:	22 30       	cpi	r18, 0x02	; 2
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	69 f0       	breq	.+26     	; 0x2ad0 <LCD_moveCursor+0x5e>
    2ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aba:	83 30       	cpi	r24, 0x03	; 3
    2abc:	91 05       	cpc	r25, r1
    2abe:	61 f0       	breq	.+24     	; 0x2ad8 <LCD_moveCursor+0x66>
    2ac0:	0e c0       	rjmp	.+28     	; 0x2ade <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	0b c0       	rjmp	.+22     	; 0x2ade <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	80 5c       	subi	r24, 0xC0	; 192
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	07 c0       	rjmp	.+14     	; 0x2ade <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	80 5f       	subi	r24, 0xF0	; 240
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	80 5b       	subi	r24, 0xB0	; 176
    2adc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	80 68       	ori	r24, 0x80	; 128
    2ae2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>
}
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	00 d0       	rcall	.+0      	; 0x2afc <LCD_displayStringRowColumn+0x6>
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <LCD_displayStringRowColumn+0x8>
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	6a 83       	std	Y+2, r22	; 0x02
    2b06:	5c 83       	std	Y+4, r21	; 0x04
    2b08:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	6a 81       	ldd	r22, Y+2	; 0x02
    2b0e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	9c 81       	ldd	r25, Y+4	; 0x04
    2b16:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_displayString>
}
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	62 97       	sbiw	r28, 0x12	; 18
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	9a 8b       	std	Y+18, r25	; 0x12
    2b3e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b40:	89 89       	ldd	r24, Y+17	; 0x11
    2b42:	9a 89       	ldd	r25, Y+18	; 0x12
    2b44:	9e 01       	movw	r18, r28
    2b46:	2f 5f       	subi	r18, 0xFF	; 255
    2b48:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4a:	b9 01       	movw	r22, r18
    2b4c:	4a e0       	ldi	r20, 0x0A	; 10
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2b54:	ce 01       	movw	r24, r28
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_displayString>
}
    2b5c:	62 96       	adiw	r28, 0x12	; 18
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	cf 91       	pop	r28
    2b6a:	df 91       	pop	r29
    2b6c:	08 95       	ret

00002b6e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b6e:	df 93       	push	r29
    2b70:	cf 93       	push	r28
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LCD_sendCommand>
}
    2b7c:	cf 91       	pop	r28
    2b7e:	df 91       	pop	r29
    2b80:	08 95       	ret

00002b82 <LEDS_init>:
uint16 g_interruptCount = 0;

#endif

void LEDS_init(void)
{
    2b82:	df 93       	push	r29
    2b84:	cf 93       	push	r28
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_BLUE_PORT_ID,LED_BLUE_PIN_ID,PIN_OUTPUT);
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_RED_PORT_ID,LED_RED_PIN_ID,PIN_OUTPUT);
    2b94:	82 e0       	ldi	r24, 0x02	; 2
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_GREEN_PORT_ID,LED_GREEN_PIN_ID,PIN_OUTPUT);
    2b9e:	82 e0       	ldi	r24, 0x02	; 2
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	41 e0       	ldi	r20, 0x01	; 1
    2ba4:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>

	if(LED_CONNCETION_TYPE == POSTIVE_LOGIC){
		GPIO_writePin(LED_BLUE_PORT_ID,LED_BLUE_PIN_ID,LOGIC_LOW);
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	62 e0       	ldi	r22, 0x02	; 2
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
		GPIO_writePin(LED_RED_PORT_ID,LED_RED_PIN_ID,LOGIC_LOW);
    2bb2:	82 e0       	ldi	r24, 0x02	; 2
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
		GPIO_writePin(LED_GREEN_PORT_ID,LED_GREEN_PIN_ID,LOGIC_LOW);
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	61 e0       	ldi	r22, 0x01	; 1
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
		GPIO_writePin(LED_BLUE_PORT_ID,LED_BLUE_PIN_ID,LOGIC_HIGH);
		GPIO_writePin(LED_RED_PORT_ID,LED_RED_PIN_ID,LOGIC_HIGH);
		GPIO_writePin(LED_GREEN_PORT_ID,LED_GREEN_PIN_ID,LOGIC_HIGH);
	}

}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <LED_flash>:

#if(LED_TIMER_INTERRUPT == TRUE)

void LED_flash(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
	static char flag = 0;

	g_interruptCount++;
    2bd4:	80 91 8c 01 	lds	r24, 0x018C
    2bd8:	90 91 8d 01 	lds	r25, 0x018D
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	90 93 8d 01 	sts	0x018D, r25
    2be2:	80 93 8c 01 	sts	0x018C, r24
	if(g_interruptCount == overflowsNeeded){
    2be6:	20 91 8c 01 	lds	r18, 0x018C
    2bea:	30 91 8d 01 	lds	r19, 0x018D
    2bee:	80 91 8a 01 	lds	r24, 0x018A
    2bf2:	90 91 8b 01 	lds	r25, 0x018B
    2bf6:	28 17       	cp	r18, r24
    2bf8:	39 07       	cpc	r19, r25
    2bfa:	01 f5       	brne	.+64     	; 0x2c3c <LED_flash+0x70>
		if(flag == 0){
    2bfc:	80 91 8e 01 	lds	r24, 0x018E
    2c00:	88 23       	and	r24, r24
    2c02:	69 f4       	brne	.+26     	; 0x2c1e <LED_flash+0x52>
			flag = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	80 93 8e 01 	sts	0x018E, r24
			LED_on(BLUE);
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
			LED_on(RED);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
			LED_on(GREEN);
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
    2c1c:	0b c0       	rjmp	.+22     	; 0x2c34 <LED_flash+0x68>

		}
		else
		{
			flag = 0;
    2c1e:	10 92 8e 01 	sts	0x018E, r1
			LED_off(BLUE);
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
			LED_off(RED);
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
			LED_off(GREEN);
    2c2e:	82 e0       	ldi	r24, 0x02	; 2
    2c30:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		}
		g_interruptCount = 0;
    2c34:	10 92 8d 01 	sts	0x018D, r1
    2c38:	10 92 8c 01 	sts	0x018C, r1
	}
}
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <LED_interruptInit>:


void LED_interruptInit(uint16 durationInMsec)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	cd b7       	in	r28, 0x3d	; 61
    2c48:	de b7       	in	r29, 0x3e	; 62
    2c4a:	6b 97       	sbiw	r28, 0x1b	; 27
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	0f be       	out	0x3f, r0	; 63
    2c54:	cd bf       	out	0x3d, r28	; 61
    2c56:	9e 8b       	std	Y+22, r25	; 0x16
    2c58:	8d 8b       	std	Y+21, r24	; 0x15
	uint16 prescaler = 0;
    2c5a:	1e 86       	std	Y+14, r1	; 0x0e
    2c5c:	1d 86       	std	Y+13, r1	; 0x0d
		break;
	case PRESCALER_256:
		prescaler = 256;
		break;
	case PRESCALER_1024:
		prescaler = 1024;
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	94 e0       	ldi	r25, 0x04	; 4
    2c62:	9e 87       	std	Y+14, r25	; 0x0e
    2c64:	8d 87       	std	Y+13, r24	; 0x0d
		break;
	}
	//uint32 totalClocks = (uint32)((((uint64)durationInMsec * F_CPU_HZ) / (prescaler * 1000)));

	uint32 durationInMicroseconds = durationInMsec * 1000UL;  // Convert to microseconds
    2c66:	8d 89       	ldd	r24, Y+21	; 0x15
    2c68:	9e 89       	ldd	r25, Y+22	; 0x16
    2c6a:	cc 01       	movw	r24, r24
    2c6c:	a0 e0       	ldi	r26, 0x00	; 0
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	28 ee       	ldi	r18, 0xE8	; 232
    2c72:	33 e0       	ldi	r19, 0x03	; 3
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__mulsi3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	89 87       	std	Y+9, r24	; 0x09
    2c86:	9a 87       	std	Y+10, r25	; 0x0a
    2c88:	ab 87       	std	Y+11, r26	; 0x0b
    2c8a:	bc 87       	std	Y+12, r27	; 0x0c
	uint32 timePerTick = prescaler * 1000000UL / F_CPU_HZ;  // Time per tick in microseconds
    2c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c90:	cc 01       	movw	r24, r24
    2c92:	a0 e0       	ldi	r26, 0x00	; 0
    2c94:	b0 e0       	ldi	r27, 0x00	; 0
    2c96:	20 e4       	ldi	r18, 0x40	; 64
    2c98:	32 e4       	ldi	r19, 0x42	; 66
    2c9a:	4f e0       	ldi	r20, 0x0F	; 15
    2c9c:	50 e0       	ldi	r21, 0x00	; 0
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <__mulsi3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	34 e2       	ldi	r19, 0x24	; 36
    2cae:	44 ef       	ldi	r20, 0xF4	; 244
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 0f 1b 	call	0x361e	; 0x361e <__udivmodsi4>
    2cba:	da 01       	movw	r26, r20
    2cbc:	c9 01       	movw	r24, r18
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	af 83       	std	Y+7, r26	; 0x07
    2cc4:	b8 87       	std	Y+8, r27	; 0x08
	uint32 timePerOverflow = 256 * timePerTick;  // Time per overflow in microseconds
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	af 81       	ldd	r26, Y+7	; 0x07
    2ccc:	b8 85       	ldd	r27, Y+8	; 0x08
    2cce:	ba 2f       	mov	r27, r26
    2cd0:	a9 2f       	mov	r26, r25
    2cd2:	98 2f       	mov	r25, r24
    2cd4:	88 27       	eor	r24, r24
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	ab 83       	std	Y+3, r26	; 0x03
    2cdc:	bc 83       	std	Y+4, r27	; 0x04

	// Calculate total overflows needed
	overflowsNeeded = durationInMicroseconds / timePerOverflow;
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ce4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ce6:	29 81       	ldd	r18, Y+1	; 0x01
    2ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    2cea:	4b 81       	ldd	r20, Y+3	; 0x03
    2cec:	5c 81       	ldd	r21, Y+4	; 0x04
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	0e 94 0f 1b 	call	0x361e	; 0x361e <__udivmodsi4>
    2cf6:	da 01       	movw	r26, r20
    2cf8:	c9 01       	movw	r24, r18
    2cfa:	90 93 8b 01 	sts	0x018B, r25
    2cfe:	80 93 8a 01 	sts	0x018A, r24

	TIMER0_configType config= {OVERFLOW,DISCONNECTED,LEDS_PRESCALER,TOIE0_bit,0,0};
    2d02:	ce 01       	movw	r24, r28
    2d04:	0f 96       	adiw	r24, 0x0f	; 15
    2d06:	98 8f       	std	Y+24, r25	; 0x18
    2d08:	8f 8b       	std	Y+23, r24	; 0x17
    2d0a:	e2 e8       	ldi	r30, 0x82	; 130
    2d0c:	f1 e0       	ldi	r31, 0x01	; 1
    2d0e:	fa 8f       	std	Y+26, r31	; 0x1a
    2d10:	e9 8f       	std	Y+25, r30	; 0x19
    2d12:	f6 e0       	ldi	r31, 0x06	; 6
    2d14:	fb 8f       	std	Y+27, r31	; 0x1b
    2d16:	e9 8d       	ldd	r30, Y+25	; 0x19
    2d18:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2d1a:	00 80       	ld	r0, Z
    2d1c:	89 8d       	ldd	r24, Y+25	; 0x19
    2d1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	9a 8f       	std	Y+26, r25	; 0x1a
    2d24:	89 8f       	std	Y+25, r24	; 0x19
    2d26:	ef 89       	ldd	r30, Y+23	; 0x17
    2d28:	f8 8d       	ldd	r31, Y+24	; 0x18
    2d2a:	00 82       	st	Z, r0
    2d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	98 8f       	std	Y+24, r25	; 0x18
    2d34:	8f 8b       	std	Y+23, r24	; 0x17
    2d36:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d38:	91 50       	subi	r25, 0x01	; 1
    2d3a:	9b 8f       	std	Y+27, r25	; 0x1b
    2d3c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2d3e:	ee 23       	and	r30, r30
    2d40:	51 f7       	brne	.-44     	; 0x2d16 <LED_interruptInit+0xd4>
	TIME0_setCallBack(LED_flash);
    2d42:	86 ee       	ldi	r24, 0xE6	; 230
    2d44:	95 e1       	ldi	r25, 0x15	; 21
    2d46:	0e 94 05 19 	call	0x320a	; 0x320a <TIME0_setCallBack>
	TIMER0_init(&config);
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	0f 96       	adiw	r24, 0x0f	; 15
    2d4e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <TIMER0_init>

}
    2d52:	6b 96       	adiw	r28, 0x1b	; 27
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <LED_interruptDeInit>:

void LED_interruptDeInit(){
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_deInit();
    2d6c:	0e 94 17 19 	call	0x322e	; 0x322e <TIMER0_deInit>
}
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <LED_on>:

#endif

void LED_on(LED_ID id)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <LED_on+0x6>
    2d7c:	0f 92       	push	r0
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	89 83       	std	Y+1, r24	; 0x01
	switch(id){
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	3b 83       	std	Y+3, r19	; 0x03
    2d8c:	2a 83       	std	Y+2, r18	; 0x02
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	9b 81       	ldd	r25, Y+3	; 0x03
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	91 05       	cpc	r25, r1
    2d96:	79 f0       	breq	.+30     	; 0x2db6 <LED_on+0x40>
    2d98:	2a 81       	ldd	r18, Y+2	; 0x02
    2d9a:	3b 81       	ldd	r19, Y+3	; 0x03
    2d9c:	22 30       	cpi	r18, 0x02	; 2
    2d9e:	31 05       	cpc	r19, r1
    2da0:	81 f0       	breq	.+32     	; 0x2dc2 <LED_on+0x4c>
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	9b 81       	ldd	r25, Y+3	; 0x03
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	89 f4       	brne	.+34     	; 0x2dcc <LED_on+0x56>
	case BLUE:
		GPIO_writePin(LED_BLUE_PORT_ID,LED_BLUE_PIN_ID,LOGIC_HIGH);
    2daa:	82 e0       	ldi	r24, 0x02	; 2
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2db4:	0b c0       	rjmp	.+22     	; 0x2dcc <LED_on+0x56>
		break;
	case RED:
		GPIO_writePin(LED_RED_PORT_ID,LED_RED_PIN_ID,LOGIC_HIGH);
    2db6:	82 e0       	ldi	r24, 0x02	; 2
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	41 e0       	ldi	r20, 0x01	; 1
    2dbc:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2dc0:	05 c0       	rjmp	.+10     	; 0x2dcc <LED_on+0x56>
		break;
	case GREEN:
		GPIO_writePin(LED_GREEN_PORT_ID,LED_GREEN_PIN_ID,LOGIC_HIGH);
    2dc2:	82 e0       	ldi	r24, 0x02	; 2
    2dc4:	61 e0       	ldi	r22, 0x01	; 1
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
		break;
	}
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <LED_off>:
void LED_off(LED_ID id)
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	00 d0       	rcall	.+0      	; 0x2dde <LED_off+0x6>
    2dde:	0f 92       	push	r0
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
    2de4:	89 83       	std	Y+1, r24	; 0x01
	switch(id){
    2de6:	89 81       	ldd	r24, Y+1	; 0x01
    2de8:	28 2f       	mov	r18, r24
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	3b 83       	std	Y+3, r19	; 0x03
    2dee:	2a 83       	std	Y+2, r18	; 0x02
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	91 05       	cpc	r25, r1
    2df8:	79 f0       	breq	.+30     	; 0x2e18 <LED_off+0x40>
    2dfa:	2a 81       	ldd	r18, Y+2	; 0x02
    2dfc:	3b 81       	ldd	r19, Y+3	; 0x03
    2dfe:	22 30       	cpi	r18, 0x02	; 2
    2e00:	31 05       	cpc	r19, r1
    2e02:	81 f0       	breq	.+32     	; 0x2e24 <LED_off+0x4c>
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	00 97       	sbiw	r24, 0x00	; 0
    2e0a:	89 f4       	brne	.+34     	; 0x2e2e <LED_off+0x56>
	case BLUE:
		GPIO_writePin(LED_BLUE_PORT_ID,LED_BLUE_PIN_ID,LOGIC_LOW);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	62 e0       	ldi	r22, 0x02	; 2
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2e16:	0b c0       	rjmp	.+22     	; 0x2e2e <LED_off+0x56>
		break;
	case RED:
		GPIO_writePin(LED_RED_PORT_ID,LED_RED_PIN_ID,LOGIC_LOW);
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    2e22:	05 c0       	rjmp	.+10     	; 0x2e2e <LED_off+0x56>
		break;
	case GREEN:
		GPIO_writePin(LED_GREEN_PORT_ID,LED_GREEN_PIN_ID,LOGIC_LOW);
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	61 e0       	ldi	r22, 0x01	; 1
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
		break;
	}
}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <main>:

void handleControl(void);


int main()
{
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62

	LEDS_init();
    2e42:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <LEDS_init>
	Ultrasonic_init();		/* initializing ultrasonic sensor */
    2e46:	0e 94 98 19 	call	0x3330	; 0x3330 <Ultrasonic_init>
	LCD_init();				/* initializing LCD driver */
    2e4a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <LCD_init>
	BUZZER_init();
    2e4e:	0e 94 17 07 	call	0xe2e	; 0xe2e <BUZZER_init>


	LCD_displayString("Distance = ");
    2e52:	80 e6       	ldi	r24, 0x60	; 96
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_displayString>

	while(1)
	{

		distance = Ultrasonic_readDistance();
    2e5a:	0e 94 b5 1a 	call	0x356a	; 0x356a <Ultrasonic_readDistance>
    2e5e:	90 93 90 01 	sts	0x0190, r25
    2e62:	80 93 8f 01 	sts	0x018F, r24

		handleDisplay();
    2e66:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <handleDisplay>

		handleAlarm();
    2e6a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <handleAlarm>

		handleControl();
    2e6e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <handleControl>
    2e72:	f3 cf       	rjmp	.-26     	; 0x2e5a <main+0x20>

00002e74 <handleDisplay>:
	}
}

void handleDisplay(void)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62


	LCD_moveCursor(0,11);
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	6b e0       	ldi	r22, 0x0B	; 11
    2e80:	0e 94 39 15 	call	0x2a72	; 0x2a72 <LCD_moveCursor>
	LCD_intgerToString(distance);
    2e84:	80 91 8f 01 	lds	r24, 0x018F
    2e88:	90 91 90 01 	lds	r25, 0x0190
    2e8c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LCD_intgerToString>
	LCD_displayString(" Cm");
    2e90:	8c e6       	ldi	r24, 0x6C	; 108
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_displayString>

}
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <handleAlarm>:
void handleAlarm(void)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62

	if(distance <= 5 && alarmState == SAFE)
    2ea6:	80 91 8f 01 	lds	r24, 0x018F
    2eaa:	90 91 90 01 	lds	r25, 0x0190
    2eae:	86 30       	cpi	r24, 0x06	; 6
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	f0 f4       	brcc	.+60     	; 0x2ef0 <handleAlarm+0x52>
    2eb4:	80 91 91 01 	lds	r24, 0x0191
    2eb8:	88 23       	and	r24, r24
    2eba:	d1 f4       	brne	.+52     	; 0x2ef0 <handleAlarm+0x52>
	{
		LED_off(RED);
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		LED_off(BLUE);
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		LED_off(GREEN);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		BUZZER_on();
    2ece:	0e 94 28 07 	call	0xe50	; 0xe50 <BUZZER_on>
		alarmState = ALARM;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	80 93 91 01 	sts	0x0191, r24
		LCD_displayStringRowColumn(1,0,"STOP");
    2ed8:	20 e7       	ldi	r18, 0x70	; 112
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	a9 01       	movw	r20, r18
    2ee2:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_displayStringRowColumn>

		LED_interruptInit(500);
    2ee6:	84 ef       	ldi	r24, 0xF4	; 244
    2ee8:	91 e0       	ldi	r25, 0x01	; 1
    2eea:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LED_interruptInit>
    2eee:	18 c0       	rjmp	.+48     	; 0x2f20 <handleAlarm+0x82>

	}
	else if(distance > 5 && alarmState == ALARM)
    2ef0:	80 91 8f 01 	lds	r24, 0x018F
    2ef4:	90 91 90 01 	lds	r25, 0x0190
    2ef8:	86 30       	cpi	r24, 0x06	; 6
    2efa:	91 05       	cpc	r25, r1
    2efc:	88 f0       	brcs	.+34     	; 0x2f20 <handleAlarm+0x82>
    2efe:	80 91 91 01 	lds	r24, 0x0191
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	69 f4       	brne	.+26     	; 0x2f20 <handleAlarm+0x82>
	{
		BUZZER_off();
    2f06:	0e 94 34 07 	call	0xe68	; 0xe68 <BUZZER_off>
		LED_interruptDeInit();
    2f0a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LED_interruptDeInit>
		alarmState = SAFE;
    2f0e:	10 92 91 01 	sts	0x0191, r1
		LCD_displayStringRowColumn(1,0,"    ");
    2f12:	25 e7       	ldi	r18, 0x75	; 117
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	a9 01       	movw	r20, r18
    2f1c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_displayStringRowColumn>

	}
}
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <handleControl>:

void handleControl(void)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
	if(distance <= 10 && distance >= 6)
    2f2e:	80 91 8f 01 	lds	r24, 0x018F
    2f32:	90 91 90 01 	lds	r25, 0x0190
    2f36:	8b 30       	cpi	r24, 0x0B	; 11
    2f38:	91 05       	cpc	r25, r1
    2f3a:	88 f4       	brcc	.+34     	; 0x2f5e <handleControl+0x38>
    2f3c:	80 91 8f 01 	lds	r24, 0x018F
    2f40:	90 91 90 01 	lds	r25, 0x0190
    2f44:	86 30       	cpi	r24, 0x06	; 6
    2f46:	91 05       	cpc	r25, r1
    2f48:	50 f0       	brcs	.+20     	; 0x2f5e <handleControl+0x38>
	{
		LED_on(RED);
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
		LED_on(BLUE);
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
		LED_on(GREEN);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
    2f5c:	40 c0       	rjmp	.+128    	; 0x2fde <handleControl+0xb8>
	}
	else if(distance <= 15 && distance >= 11)
    2f5e:	80 91 8f 01 	lds	r24, 0x018F
    2f62:	90 91 90 01 	lds	r25, 0x0190
    2f66:	80 31       	cpi	r24, 0x10	; 16
    2f68:	91 05       	cpc	r25, r1
    2f6a:	88 f4       	brcc	.+34     	; 0x2f8e <handleControl+0x68>
    2f6c:	80 91 8f 01 	lds	r24, 0x018F
    2f70:	90 91 90 01 	lds	r25, 0x0190
    2f74:	8b 30       	cpi	r24, 0x0B	; 11
    2f76:	91 05       	cpc	r25, r1
    2f78:	50 f0       	brcs	.+20     	; 0x2f8e <handleControl+0x68>
	{
		LED_on(RED);
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
		LED_off(BLUE);
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		LED_on(GREEN);
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
    2f8c:	28 c0       	rjmp	.+80     	; 0x2fde <handleControl+0xb8>

	}
	else if(distance <= 20 && distance >= 16)
    2f8e:	80 91 8f 01 	lds	r24, 0x018F
    2f92:	90 91 90 01 	lds	r25, 0x0190
    2f96:	85 31       	cpi	r24, 0x15	; 21
    2f98:	91 05       	cpc	r25, r1
    2f9a:	88 f4       	brcc	.+34     	; 0x2fbe <handleControl+0x98>
    2f9c:	80 91 8f 01 	lds	r24, 0x018F
    2fa0:	90 91 90 01 	lds	r25, 0x0190
    2fa4:	80 31       	cpi	r24, 0x10	; 16
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	50 f0       	brcs	.+20     	; 0x2fbe <handleControl+0x98>
	{
		LED_on(RED);
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <LED_on>
		LED_off(BLUE);
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		LED_off(GREEN);
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
    2fbc:	10 c0       	rjmp	.+32     	; 0x2fde <handleControl+0xb8>

	}
	else if(distance > 20)
    2fbe:	80 91 8f 01 	lds	r24, 0x018F
    2fc2:	90 91 90 01 	lds	r25, 0x0190
    2fc6:	85 31       	cpi	r24, 0x15	; 21
    2fc8:	91 05       	cpc	r25, r1
    2fca:	48 f0       	brcs	.+18     	; 0x2fde <handleControl+0xb8>
	{

		LED_off(RED);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		LED_off(BLUE);
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
		LED_off(GREEN);
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LED_off>
	}
}
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <TIMER0_init>:

static volatile void(*g_callBackPtr)(void) = NULL_PTR;


void TIMER0_init(TIMER0_configType *config)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <TIMER0_init+0x6>
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <TIMER0_init+0x8>
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <TIMER0_init+0xa>
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01

	/* clearing TIMER0 registers */
	TCCR0 = 0;
    2ff6:	e3 e5       	ldi	r30, 0x53	; 83
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	10 82       	st	Z, r1
	TIMSK &= 0b11111100;
    2ffc:	a9 e5       	ldi	r26, 0x59	; 89
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e9 e5       	ldi	r30, 0x59	; 89
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	8c 7f       	andi	r24, 0xFC	; 252
    3008:	8c 93       	st	X, r24


	/* configuring FOC0 bit */
	if(config -> mode == PWM_PHASE_CORRECT || config -> mode == FAST_PWM)
    300a:	e9 81       	ldd	r30, Y+1	; 0x01
    300c:	fa 81       	ldd	r31, Y+2	; 0x02
    300e:	80 81       	ld	r24, Z
    3010:	81 30       	cpi	r24, 0x01	; 1
    3012:	29 f0       	breq	.+10     	; 0x301e <TIMER0_init+0x3a>
    3014:	e9 81       	ldd	r30, Y+1	; 0x01
    3016:	fa 81       	ldd	r31, Y+2	; 0x02
    3018:	80 81       	ld	r24, Z
    301a:	83 30       	cpi	r24, 0x03	; 3
    301c:	11 f5       	brne	.+68     	; 0x3062 <TIMER0_init+0x7e>
	{
		TCCR0 &=~(1<<FOC0);
    301e:	a3 e5       	ldi	r26, 0x53	; 83
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e3 e5       	ldi	r30, 0x53	; 83
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8f 77       	andi	r24, 0x7F	; 127
    302a:	8c 93       	st	X, r24

		/* setting duty cycle */
		OCR0 = ((config -> outputCompareRegister) / 100) * 255;
    302c:	ac e5       	ldi	r26, 0x5C	; 92
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e9 81       	ldd	r30, Y+1	; 0x01
    3032:	fa 81       	ldd	r31, Y+2	; 0x02
    3034:	85 81       	ldd	r24, Z+5	; 0x05
    3036:	94 e6       	ldi	r25, 0x64	; 100
    3038:	69 2f       	mov	r22, r25
    303a:	0e 94 03 1b 	call	0x3606	; 0x3606 <__udivmodqi4>
    303e:	48 2f       	mov	r20, r24
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	ca 01       	movw	r24, r20
    3044:	9c 01       	movw	r18, r24
    3046:	22 0f       	add	r18, r18
    3048:	33 1f       	adc	r19, r19
    304a:	c9 01       	movw	r24, r18
    304c:	96 95       	lsr	r25
    304e:	98 2f       	mov	r25, r24
    3050:	88 27       	eor	r24, r24
    3052:	97 95       	ror	r25
    3054:	87 95       	ror	r24
    3056:	82 1b       	sub	r24, r18
    3058:	93 0b       	sbc	r25, r19
    305a:	84 0f       	add	r24, r20
    305c:	95 1f       	adc	r25, r21
    305e:	8c 93       	st	X, r24
    3060:	07 c0       	rjmp	.+14     	; 0x3070 <TIMER0_init+0x8c>
	}
	else
	{
		TCCR0 |=(1<<FOC0);
    3062:	a3 e5       	ldi	r26, 0x53	; 83
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e3 e5       	ldi	r30, 0x53	; 83
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	80 68       	ori	r24, 0x80	; 128
    306e:	8c 93       	st	X, r24
	}

	if(config -> compareOutputMode != DISCONNECTED)
    3070:	e9 81       	ldd	r30, Y+1	; 0x01
    3072:	fa 81       	ldd	r31, Y+2	; 0x02
    3074:	81 81       	ldd	r24, Z+1	; 0x01
    3076:	88 23       	and	r24, r24
    3078:	29 f0       	breq	.+10     	; 0x3084 <TIMER0_init+0xa0>
	{
		/* setting direction of OC0 pin */
		GPIO_setupPinDirection(TIMER0_OUTPUT_COMPARE_PORT_ID,TIMER0_OUTPUT_COMPARE_PIN_ID,PIN_OUTPUT);
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	63 e0       	ldi	r22, 0x03	; 3
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
	}

	/* configuring wave generation mode */
	switch(config ->mode)
    3084:	e9 81       	ldd	r30, Y+1	; 0x01
    3086:	fa 81       	ldd	r31, Y+2	; 0x02
    3088:	80 81       	ld	r24, Z
    308a:	28 2f       	mov	r18, r24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	3e 83       	std	Y+6, r19	; 0x06
    3090:	2d 83       	std	Y+5, r18	; 0x05
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	81 30       	cpi	r24, 0x01	; 1
    3098:	91 05       	cpc	r25, r1
    309a:	e9 f0       	breq	.+58     	; 0x30d6 <TIMER0_init+0xf2>
    309c:	2d 81       	ldd	r18, Y+5	; 0x05
    309e:	3e 81       	ldd	r19, Y+6	; 0x06
    30a0:	22 30       	cpi	r18, 0x02	; 2
    30a2:	31 05       	cpc	r19, r1
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <TIMER0_init+0xcc>
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
    30a8:	9e 81       	ldd	r25, Y+6	; 0x06
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	61 f0       	breq	.+24     	; 0x30c6 <TIMER0_init+0xe2>
    30ae:	3f c0       	rjmp	.+126    	; 0x312e <TIMER0_init+0x14a>
    30b0:	2d 81       	ldd	r18, Y+5	; 0x05
    30b2:	3e 81       	ldd	r19, Y+6	; 0x06
    30b4:	22 30       	cpi	r18, 0x02	; 2
    30b6:	31 05       	cpc	r19, r1
    30b8:	e9 f0       	breq	.+58     	; 0x30f4 <TIMER0_init+0x110>
    30ba:	8d 81       	ldd	r24, Y+5	; 0x05
    30bc:	9e 81       	ldd	r25, Y+6	; 0x06
    30be:	83 30       	cpi	r24, 0x03	; 3
    30c0:	91 05       	cpc	r25, r1
    30c2:	39 f1       	breq	.+78     	; 0x3112 <TIMER0_init+0x12e>
    30c4:	34 c0       	rjmp	.+104    	; 0x312e <TIMER0_init+0x14a>
	{
	case OVERFLOW:
		TCCR0 &=~(1<<WGM00) &~(1<<WGM01);
    30c6:	a3 e5       	ldi	r26, 0x53	; 83
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e3 e5       	ldi	r30, 0x53	; 83
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	87 7b       	andi	r24, 0xB7	; 183
    30d2:	8c 93       	st	X, r24
    30d4:	2c c0       	rjmp	.+88     	; 0x312e <TIMER0_init+0x14a>
		break;
	case PWM_PHASE_CORRECT:
		TCCR0 &=~(1<<WGM01);
    30d6:	a3 e5       	ldi	r26, 0x53	; 83
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e3 e5       	ldi	r30, 0x53	; 83
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	87 7f       	andi	r24, 0xF7	; 247
    30e2:	8c 93       	st	X, r24
		TCCR0 |=(1<<WGM00);
    30e4:	a3 e5       	ldi	r26, 0x53	; 83
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e3 e5       	ldi	r30, 0x53	; 83
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	80 64       	ori	r24, 0x40	; 64
    30f0:	8c 93       	st	X, r24
    30f2:	1d c0       	rjmp	.+58     	; 0x312e <TIMER0_init+0x14a>
		break;
	case CTC:
		TCCR0 &=~(1<<WGM00);
    30f4:	a3 e5       	ldi	r26, 0x53	; 83
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e3 e5       	ldi	r30, 0x53	; 83
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 7b       	andi	r24, 0xBF	; 191
    3100:	8c 93       	st	X, r24
		TCCR0 |=(1<<WGM01);
    3102:	a3 e5       	ldi	r26, 0x53	; 83
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	e3 e5       	ldi	r30, 0x53	; 83
    3108:	f0 e0       	ldi	r31, 0x00	; 0
    310a:	80 81       	ld	r24, Z
    310c:	88 60       	ori	r24, 0x08	; 8
    310e:	8c 93       	st	X, r24
    3110:	0e c0       	rjmp	.+28     	; 0x312e <TIMER0_init+0x14a>
		break;
	case FAST_PWM:
		TCCR0 |=(1<<WGM01);
    3112:	a3 e5       	ldi	r26, 0x53	; 83
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e3 e5       	ldi	r30, 0x53	; 83
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	88 60       	ori	r24, 0x08	; 8
    311e:	8c 93       	st	X, r24
		TCCR0 |=(1<<WGM00);
    3120:	a3 e5       	ldi	r26, 0x53	; 83
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e3 e5       	ldi	r30, 0x53	; 83
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	80 64       	ori	r24, 0x40	; 64
    312c:	8c 93       	st	X, r24
		break;
	}

	/* configuring compare output mode */
	TCCR0 = (TCCR0 & 0b11001111) | ((config -> compareOutputMode) << 4);
    312e:	a3 e5       	ldi	r26, 0x53	; 83
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e3 e5       	ldi	r30, 0x53	; 83
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	28 2f       	mov	r18, r24
    313a:	2f 7c       	andi	r18, 0xCF	; 207
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	81 81       	ldd	r24, Z+1	; 0x01
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	82 95       	swap	r24
    3148:	92 95       	swap	r25
    314a:	90 7f       	andi	r25, 0xF0	; 240
    314c:	98 27       	eor	r25, r24
    314e:	80 7f       	andi	r24, 0xF0	; 240
    3150:	98 27       	eor	r25, r24
    3152:	82 2b       	or	r24, r18
    3154:	8c 93       	st	X, r24

	/* configuring TIMER0 prescaler */
	TCCR0 = (TCCR0 & 0b11111000) | (config -> prescaler);
    3156:	a3 e5       	ldi	r26, 0x53	; 83
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e3 e5       	ldi	r30, 0x53	; 83
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	98 2f       	mov	r25, r24
    3162:	98 7f       	andi	r25, 0xF8	; 248
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	82 81       	ldd	r24, Z+2	; 0x02
    316a:	89 2b       	or	r24, r25
    316c:	8c 93       	st	X, r24

	/* enable interrupt bit if needed */
	switch(config -> interruptMask)
    316e:	e9 81       	ldd	r30, Y+1	; 0x01
    3170:	fa 81       	ldd	r31, Y+2	; 0x02
    3172:	83 81       	ldd	r24, Z+3	; 0x03
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	3c 83       	std	Y+4, r19	; 0x04
    317a:	2b 83       	std	Y+3, r18	; 0x03
    317c:	8b 81       	ldd	r24, Y+3	; 0x03
    317e:	9c 81       	ldd	r25, Y+4	; 0x04
    3180:	81 30       	cpi	r24, 0x01	; 1
    3182:	91 05       	cpc	r25, r1
    3184:	31 f0       	breq	.+12     	; 0x3192 <TIMER0_init+0x1ae>
    3186:	2b 81       	ldd	r18, Y+3	; 0x03
    3188:	3c 81       	ldd	r19, Y+4	; 0x04
    318a:	22 30       	cpi	r18, 0x02	; 2
    318c:	31 05       	cpc	r19, r1
    318e:	81 f0       	breq	.+32     	; 0x31b0 <TIMER0_init+0x1cc>
    3190:	24 c0       	rjmp	.+72     	; 0x31da <TIMER0_init+0x1f6>
	{
	case TOIE0_bit:
		TIMSK|=(1<<TOIE0);
    3192:	a9 e5       	ldi	r26, 0x59	; 89
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e9 e5       	ldi	r30, 0x59	; 89
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	81 60       	ori	r24, 0x01	; 1
    319e:	8c 93       	st	X, r24
		SREG |= (1<<7);
    31a0:	af e5       	ldi	r26, 0x5F	; 95
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	ef e5       	ldi	r30, 0x5F	; 95
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	80 68       	ori	r24, 0x80	; 128
    31ac:	8c 93       	st	X, r24
    31ae:	1c c0       	rjmp	.+56     	; 0x31e8 <TIMER0_init+0x204>
		break;
	case OCIE0_bit:
		TIMSK|=(1<<OCIE0_bit);
    31b0:	a9 e5       	ldi	r26, 0x59	; 89
    31b2:	b0 e0       	ldi	r27, 0x00	; 0
    31b4:	e9 e5       	ldi	r30, 0x59	; 89
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	80 81       	ld	r24, Z
    31ba:	84 60       	ori	r24, 0x04	; 4
    31bc:	8c 93       	st	X, r24
		OCR0= config -> outputCompareRegister;
    31be:	ac e5       	ldi	r26, 0x5C	; 92
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e9 81       	ldd	r30, Y+1	; 0x01
    31c4:	fa 81       	ldd	r31, Y+2	; 0x02
    31c6:	85 81       	ldd	r24, Z+5	; 0x05
    31c8:	8c 93       	st	X, r24
		SREG |= (1<<7);
    31ca:	af e5       	ldi	r26, 0x5F	; 95
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	ef e5       	ldi	r30, 0x5F	; 95
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	80 68       	ori	r24, 0x80	; 128
    31d6:	8c 93       	st	X, r24
    31d8:	07 c0       	rjmp	.+14     	; 0x31e8 <TIMER0_init+0x204>
		break;
	default:
		TIMSK &= 0b11111100;
    31da:	a9 e5       	ldi	r26, 0x59	; 89
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e9 e5       	ldi	r30, 0x59	; 89
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	8c 7f       	andi	r24, 0xFC	; 252
    31e6:	8c 93       	st	X, r24
	}

	/* setting timer counter initial value */
	TCNT0= config-> timerCounterRegister;
    31e8:	e2 e5       	ldi	r30, 0x52	; 82
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	a9 81       	ldd	r26, Y+1	; 0x01
    31ee:	ba 81       	ldd	r27, Y+2	; 0x02
    31f0:	14 96       	adiw	r26, 0x04	; 4
    31f2:	8c 91       	ld	r24, X
    31f4:	14 97       	sbiw	r26, 0x04	; 4
    31f6:	80 83       	st	Z, r24
}
    31f8:	26 96       	adiw	r28, 0x06	; 6
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <TIME0_setCallBack>:

void TIME0_setCallBack(void(*a_ptr)(void))
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <TIME0_setCallBack+0x6>
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;	/* saving address of call back function */
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	90 93 93 01 	sts	0x0193, r25
    3220:	80 93 92 01 	sts	0x0192, r24
}
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <TIMER0_deInit>:

void TIMER0_deInit(void)
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
	/* clearing all TIMER0 registers and bits */
	TCCR0 = 0;
    3236:	e3 e5       	ldi	r30, 0x53	; 83
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	10 82       	st	Z, r1
	TIMSK &= 0b11111100;
    323c:	a9 e5       	ldi	r26, 0x59	; 89
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e9 e5       	ldi	r30, 0x59	; 89
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	8c 7f       	andi	r24, 0xFC	; 252
    3248:	8c 93       	st	X, r24
	TCNT0= 0;
    324a:	e2 e5       	ldi	r30, 0x52	; 82
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	10 82       	st	Z, r1
	OCR0 = 0;
    3250:	ec e5       	ldi	r30, 0x5C	; 92
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	10 82       	st	Z, r1

	/* resetting pointer to point to NULL */
	g_callBackPtr = NULL_PTR;
    3256:	10 92 93 01 	sts	0x0193, r1
    325a:	10 92 92 01 	sts	0x0192, r1
}
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
    3264:	1f 92       	push	r1
    3266:	0f 92       	push	r0
    3268:	0f b6       	in	r0, 0x3f	; 63
    326a:	0f 92       	push	r0
    326c:	11 24       	eor	r1, r1
    326e:	2f 93       	push	r18
    3270:	3f 93       	push	r19
    3272:	4f 93       	push	r20
    3274:	5f 93       	push	r21
    3276:	6f 93       	push	r22
    3278:	7f 93       	push	r23
    327a:	8f 93       	push	r24
    327c:	9f 93       	push	r25
    327e:	af 93       	push	r26
    3280:	bf 93       	push	r27
    3282:	ef 93       	push	r30
    3284:	ff 93       	push	r31
    3286:	df 93       	push	r29
    3288:	cf 93       	push	r28
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    328e:	80 91 92 01 	lds	r24, 0x0192
    3292:	90 91 93 01 	lds	r25, 0x0193
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	29 f0       	breq	.+10     	; 0x32a4 <__vector_11+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    329a:	e0 91 92 01 	lds	r30, 0x0192
    329e:	f0 91 93 01 	lds	r31, 0x0193
    32a2:	09 95       	icall
	}
}
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	ff 91       	pop	r31
    32aa:	ef 91       	pop	r30
    32ac:	bf 91       	pop	r27
    32ae:	af 91       	pop	r26
    32b0:	9f 91       	pop	r25
    32b2:	8f 91       	pop	r24
    32b4:	7f 91       	pop	r23
    32b6:	6f 91       	pop	r22
    32b8:	5f 91       	pop	r21
    32ba:	4f 91       	pop	r20
    32bc:	3f 91       	pop	r19
    32be:	2f 91       	pop	r18
    32c0:	0f 90       	pop	r0
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	0f 90       	pop	r0
    32c6:	1f 90       	pop	r1
    32c8:	18 95       	reti

000032ca <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    32ca:	1f 92       	push	r1
    32cc:	0f 92       	push	r0
    32ce:	0f b6       	in	r0, 0x3f	; 63
    32d0:	0f 92       	push	r0
    32d2:	11 24       	eor	r1, r1
    32d4:	2f 93       	push	r18
    32d6:	3f 93       	push	r19
    32d8:	4f 93       	push	r20
    32da:	5f 93       	push	r21
    32dc:	6f 93       	push	r22
    32de:	7f 93       	push	r23
    32e0:	8f 93       	push	r24
    32e2:	9f 93       	push	r25
    32e4:	af 93       	push	r26
    32e6:	bf 93       	push	r27
    32e8:	ef 93       	push	r30
    32ea:	ff 93       	push	r31
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    32f4:	80 91 92 01 	lds	r24, 0x0192
    32f8:	90 91 93 01 	lds	r25, 0x0193
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	29 f0       	breq	.+10     	; 0x330a <__vector_10+0x40>
	{
		(*g_callBackPtr)();		/* calling call back function */
    3300:	e0 91 92 01 	lds	r30, 0x0192
    3304:	f0 91 93 01 	lds	r31, 0x0193
    3308:	09 95       	icall
	}
}
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	ff 91       	pop	r31
    3310:	ef 91       	pop	r30
    3312:	bf 91       	pop	r27
    3314:	af 91       	pop	r26
    3316:	9f 91       	pop	r25
    3318:	8f 91       	pop	r24
    331a:	7f 91       	pop	r23
    331c:	6f 91       	pop	r22
    331e:	5f 91       	pop	r21
    3320:	4f 91       	pop	r20
    3322:	3f 91       	pop	r19
    3324:	2f 91       	pop	r18
    3326:	0f 90       	pop	r0
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	0f 90       	pop	r0
    332c:	1f 90       	pop	r1
    332e:	18 95       	reti

00003330 <Ultrasonic_init>:




void Ultrasonic_init(void)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	00 d0       	rcall	.+0      	; 0x3336 <Ultrasonic_init+0x6>
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
	/* settin ICU call back function */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    333a:	83 eb       	ldi	r24, 0xB3	; 179
    333c:	99 e1       	ldi	r25, 0x19	; 25
    333e:	0e 94 01 0b 	call	0x1602	; 0x1602 <ICU_setCallBack>

	/* initializing ICU with specific configurations*/
	ICU_ConfigType US_config = {US_SENSOR_ICU_PRESCALER, US_SENSOR_ICU_STARTING_EDGE};
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&US_config);
    334a:	ce 01       	movw	r24, r28
    334c:	01 96       	adiw	r24, 0x01	; 1
    334e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <ICU_init>

	/* configuring trigger pin as output pin */
	GPIO_setupPinDirection(US_SENSOR_TRIGGER_PORT_ID, US_SENSOR_TRIGGER_PIN_ID, PIN_OUTPUT);
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	67 e0       	ldi	r22, 0x07	; 7
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 40 07 	call	0xe80	; 0xe80 <GPIO_setupPinDirection>
}
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
	static uint8 US_EdgesCount = 0;
	US_EdgesCount++;
    336e:	80 91 98 01 	lds	r24, 0x0198
    3372:	8f 5f       	subi	r24, 0xFF	; 255
    3374:	80 93 98 01 	sts	0x0198, r24
	if(US_EdgesCount == 1)
    3378:	80 91 98 01 	lds	r24, 0x0198
    337c:	81 30       	cpi	r24, 0x01	; 1
    337e:	31 f4       	brne	.+12     	; 0x338c <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue();
    3380:	0e 94 3d 0b 	call	0x167a	; 0x167a <ICU_clearTimerValue>

		/* setting icu edge */
		ICU_setEdgeDetectionType(FALLING);
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	0e 94 13 0b 	call	0x1626	; 0x1626 <ICU_setEdgeDetectionType>
    338a:	11 c0       	rjmp	.+34     	; 0x33ae <Ultrasonic_edgeProcessing+0x48>
	}
	else if(US_EdgesCount == 2)
    338c:	80 91 98 01 	lds	r24, 0x0198
    3390:	82 30       	cpi	r24, 0x02	; 2
    3392:	69 f4       	brne	.+26     	; 0x33ae <Ultrasonic_edgeProcessing+0x48>
	{
		/* storing ICR1 value */
		US_HighTime = ICU_getInputCaptureValue();
    3394:	0e 94 32 0b 	call	0x1664	; 0x1664 <ICU_getInputCaptureValue>
    3398:	90 93 97 01 	sts	0x0197, r25
    339c:	80 93 96 01 	sts	0x0196, r24

		ICU_clearTimerValue();
    33a0:	0e 94 3d 0b 	call	0x167a	; 0x167a <ICU_clearTimerValue>

		ICU_setEdgeDetectionType(RAISING);
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	0e 94 13 0b 	call	0x1626	; 0x1626 <ICU_setEdgeDetectionType>

		/* resetting edges counter variable */
		US_EdgesCount = 0;
    33aa:	10 92 98 01 	sts	0x0198, r1

	}
}
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	68 97       	sbiw	r28, 0x18	; 24
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
	/* trigger for 10us */
	GPIO_writePin(US_SENSOR_TRIGGER_PORT_ID, US_SENSOR_TRIGGER_PIN_ID, TRIGGER);
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	67 e0       	ldi	r22, 0x07	; 7
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
    33d2:	80 e0       	ldi	r24, 0x00	; 0
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	a0 e3       	ldi	r26, 0x30	; 48
    33d8:	b1 e4       	ldi	r27, 0x41	; 65
    33da:	8d 8b       	std	Y+21, r24	; 0x15
    33dc:	9e 8b       	std	Y+22, r25	; 0x16
    33de:	af 8b       	std	Y+23, r26	; 0x17
    33e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33e2:	6d 89       	ldd	r22, Y+21	; 0x15
    33e4:	7e 89       	ldd	r23, Y+22	; 0x16
    33e6:	8f 89       	ldd	r24, Y+23	; 0x17
    33e8:	98 8d       	ldd	r25, Y+24	; 0x18
    33ea:	2b ea       	ldi	r18, 0xAB	; 171
    33ec:	3a ea       	ldi	r19, 0xAA	; 170
    33ee:	4a ea       	ldi	r20, 0xAA	; 170
    33f0:	50 e4       	ldi	r21, 0x40	; 64
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	89 8b       	std	Y+17, r24	; 0x11
    33fc:	9a 8b       	std	Y+18, r25	; 0x12
    33fe:	ab 8b       	std	Y+19, r26	; 0x13
    3400:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3402:	69 89       	ldd	r22, Y+17	; 0x11
    3404:	7a 89       	ldd	r23, Y+18	; 0x12
    3406:	8b 89       	ldd	r24, Y+19	; 0x13
    3408:	9c 89       	ldd	r25, Y+20	; 0x14
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3416:	88 23       	and	r24, r24
    3418:	1c f4       	brge	.+6      	; 0x3420 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	88 8b       	std	Y+16, r24	; 0x10
    341e:	91 c0       	rjmp	.+290    	; 0x3542 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    3420:	69 89       	ldd	r22, Y+17	; 0x11
    3422:	7a 89       	ldd	r23, Y+18	; 0x12
    3424:	8b 89       	ldd	r24, Y+19	; 0x13
    3426:	9c 89       	ldd	r25, Y+20	; 0x14
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	53 e4       	ldi	r21, 0x43	; 67
    3430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	0c f0       	brlt	.+2      	; 0x343a <Ultrasonic_Trigger+0x86>
    3438:	7b c0       	rjmp	.+246    	; 0x3530 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    343a:	6d 89       	ldd	r22, Y+21	; 0x15
    343c:	7e 89       	ldd	r23, Y+22	; 0x16
    343e:	8f 89       	ldd	r24, Y+23	; 0x17
    3440:	98 8d       	ldd	r25, Y+24	; 0x18
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	4a e7       	ldi	r20, 0x7A	; 122
    3448:	54 e4       	ldi	r21, 0x44	; 68
    344a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	8c 87       	std	Y+12, r24	; 0x0c
    3454:	9d 87       	std	Y+13, r25	; 0x0d
    3456:	ae 87       	std	Y+14, r26	; 0x0e
    3458:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345a:	6c 85       	ldd	r22, Y+12	; 0x0c
    345c:	7d 85       	ldd	r23, Y+13	; 0x0d
    345e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3460:	9f 85       	ldd	r25, Y+15	; 0x0f
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	4a e7       	ldi	r20, 0x7A	; 122
    3468:	55 e4       	ldi	r21, 0x45	; 69
    346a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	88 87       	std	Y+8, r24	; 0x08
    3474:	99 87       	std	Y+9, r25	; 0x09
    3476:	aa 87       	std	Y+10, r26	; 0x0a
    3478:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    347a:	68 85       	ldd	r22, Y+8	; 0x08
    347c:	79 85       	ldd	r23, Y+9	; 0x09
    347e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3480:	9b 85       	ldd	r25, Y+11	; 0x0b
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e8       	ldi	r20, 0x80	; 128
    3488:	5f e3       	ldi	r21, 0x3F	; 63
    348a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    348e:	88 23       	and	r24, r24
    3490:	2c f4       	brge	.+10     	; 0x349c <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9f 83       	std	Y+7, r25	; 0x07
    3498:	8e 83       	std	Y+6, r24	; 0x06
    349a:	3f c0       	rjmp	.+126    	; 0x351a <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    349c:	68 85       	ldd	r22, Y+8	; 0x08
    349e:	79 85       	ldd	r23, Y+9	; 0x09
    34a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    34a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	3f ef       	ldi	r19, 0xFF	; 255
    34a8:	4f e7       	ldi	r20, 0x7F	; 127
    34aa:	57 e4       	ldi	r21, 0x47	; 71
    34ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b0:	18 16       	cp	r1, r24
    34b2:	4c f5       	brge	.+82     	; 0x3506 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    34b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    34b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	40 e2       	ldi	r20, 0x20	; 32
    34c2:	51 e4       	ldi	r21, 0x41	; 65
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	9f 83       	std	Y+7, r25	; 0x07
    34da:	8e 83       	std	Y+6, r24	; 0x06
    34dc:	0f c0       	rjmp	.+30     	; 0x34fc <Ultrasonic_Trigger+0x148>
    34de:	80 e9       	ldi	r24, 0x90	; 144
    34e0:	91 e0       	ldi	r25, 0x01	; 1
    34e2:	9d 83       	std	Y+5, r25	; 0x05
    34e4:	8c 83       	std	Y+4, r24	; 0x04
    34e6:	8c 81       	ldd	r24, Y+4	; 0x04
    34e8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <Ultrasonic_Trigger+0x136>
    34ee:	9d 83       	std	Y+5, r25	; 0x05
    34f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f2:	8e 81       	ldd	r24, Y+6	; 0x06
    34f4:	9f 81       	ldd	r25, Y+7	; 0x07
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	9f 83       	std	Y+7, r25	; 0x07
    34fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fc:	8e 81       	ldd	r24, Y+6	; 0x06
    34fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	69 f7       	brne	.-38     	; 0x34de <Ultrasonic_Trigger+0x12a>
    3504:	24 c0       	rjmp	.+72     	; 0x354e <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3506:	68 85       	ldd	r22, Y+8	; 0x08
    3508:	79 85       	ldd	r23, Y+9	; 0x09
    350a:	8a 85       	ldd	r24, Y+10	; 0x0a
    350c:	9b 85       	ldd	r25, Y+11	; 0x0b
    350e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	9f 83       	std	Y+7, r25	; 0x07
    3518:	8e 83       	std	Y+6, r24	; 0x06
    351a:	8e 81       	ldd	r24, Y+6	; 0x06
    351c:	9f 81       	ldd	r25, Y+7	; 0x07
    351e:	9b 83       	std	Y+3, r25	; 0x03
    3520:	8a 83       	std	Y+2, r24	; 0x02
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	9b 81       	ldd	r25, Y+3	; 0x03
    3526:	01 97       	sbiw	r24, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <Ultrasonic_Trigger+0x172>
    352a:	9b 83       	std	Y+3, r25	; 0x03
    352c:	8a 83       	std	Y+2, r24	; 0x02
    352e:	0f c0       	rjmp	.+30     	; 0x354e <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3530:	69 89       	ldd	r22, Y+17	; 0x11
    3532:	7a 89       	ldd	r23, Y+18	; 0x12
    3534:	8b 89       	ldd	r24, Y+19	; 0x13
    3536:	9c 89       	ldd	r25, Y+20	; 0x14
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	88 8b       	std	Y+16, r24	; 0x10
    3542:	88 89       	ldd	r24, Y+16	; 0x10
    3544:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	8a 95       	dec	r24
    354a:	f1 f7       	brne	.-4      	; 0x3548 <Ultrasonic_Trigger+0x194>
    354c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(11);
	GPIO_writePin(US_SENSOR_TRIGGER_PORT_ID, US_SENSOR_TRIGGER_PIN_ID, NO_TRIGGER);
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	67 e0       	ldi	r22, 0x07	; 7
    3552:	40 e0       	ldi	r20, 0x00	; 0
    3554:	0e 94 2b 08 	call	0x1056	; 0x1056 <GPIO_writePin>
}
    3558:	68 96       	adiw	r28, 0x18	; 24
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    356a:	df 93       	push	r29
    356c:	cf 93       	push	r28
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62

	Ultrasonic_Trigger();
    3572:	0e 94 da 19 	call	0x33b4	; 0x33b4 <Ultrasonic_Trigger>

	/* calculating distance */
	//US_distance = ((34000 * US_HighTime * TIME_OF_CLOCK_CYCLE_sec) / 2);
	US_distance = (uint16)((US_HighTime)/117.6)+1;
    3576:	80 91 96 01 	lds	r24, 0x0196
    357a:	90 91 97 01 	lds	r25, 0x0197
    357e:	cc 01       	movw	r24, r24
    3580:	a0 e0       	ldi	r26, 0x00	; 0
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	bc 01       	movw	r22, r24
    3592:	cd 01       	movw	r24, r26
    3594:	23 e3       	ldi	r18, 0x33	; 51
    3596:	33 e3       	ldi	r19, 0x33	; 51
    3598:	4b ee       	ldi	r20, 0xEB	; 235
    359a:	52 e4       	ldi	r21, 0x42	; 66
    359c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	90 93 95 01 	sts	0x0195, r25
    35b6:	80 93 94 01 	sts	0x0194, r24


	return US_distance;
    35ba:	80 91 94 01 	lds	r24, 0x0194
    35be:	90 91 95 01 	lds	r25, 0x0195
}
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <__mulsi3>:
    35c8:	62 9f       	mul	r22, r18
    35ca:	d0 01       	movw	r26, r0
    35cc:	73 9f       	mul	r23, r19
    35ce:	f0 01       	movw	r30, r0
    35d0:	82 9f       	mul	r24, r18
    35d2:	e0 0d       	add	r30, r0
    35d4:	f1 1d       	adc	r31, r1
    35d6:	64 9f       	mul	r22, r20
    35d8:	e0 0d       	add	r30, r0
    35da:	f1 1d       	adc	r31, r1
    35dc:	92 9f       	mul	r25, r18
    35de:	f0 0d       	add	r31, r0
    35e0:	83 9f       	mul	r24, r19
    35e2:	f0 0d       	add	r31, r0
    35e4:	74 9f       	mul	r23, r20
    35e6:	f0 0d       	add	r31, r0
    35e8:	65 9f       	mul	r22, r21
    35ea:	f0 0d       	add	r31, r0
    35ec:	99 27       	eor	r25, r25
    35ee:	72 9f       	mul	r23, r18
    35f0:	b0 0d       	add	r27, r0
    35f2:	e1 1d       	adc	r30, r1
    35f4:	f9 1f       	adc	r31, r25
    35f6:	63 9f       	mul	r22, r19
    35f8:	b0 0d       	add	r27, r0
    35fa:	e1 1d       	adc	r30, r1
    35fc:	f9 1f       	adc	r31, r25
    35fe:	bd 01       	movw	r22, r26
    3600:	cf 01       	movw	r24, r30
    3602:	11 24       	eor	r1, r1
    3604:	08 95       	ret

00003606 <__udivmodqi4>:
    3606:	99 1b       	sub	r25, r25
    3608:	79 e0       	ldi	r23, 0x09	; 9
    360a:	04 c0       	rjmp	.+8      	; 0x3614 <__udivmodqi4_ep>

0000360c <__udivmodqi4_loop>:
    360c:	99 1f       	adc	r25, r25
    360e:	96 17       	cp	r25, r22
    3610:	08 f0       	brcs	.+2      	; 0x3614 <__udivmodqi4_ep>
    3612:	96 1b       	sub	r25, r22

00003614 <__udivmodqi4_ep>:
    3614:	88 1f       	adc	r24, r24
    3616:	7a 95       	dec	r23
    3618:	c9 f7       	brne	.-14     	; 0x360c <__udivmodqi4_loop>
    361a:	80 95       	com	r24
    361c:	08 95       	ret

0000361e <__udivmodsi4>:
    361e:	a1 e2       	ldi	r26, 0x21	; 33
    3620:	1a 2e       	mov	r1, r26
    3622:	aa 1b       	sub	r26, r26
    3624:	bb 1b       	sub	r27, r27
    3626:	fd 01       	movw	r30, r26
    3628:	0d c0       	rjmp	.+26     	; 0x3644 <__udivmodsi4_ep>

0000362a <__udivmodsi4_loop>:
    362a:	aa 1f       	adc	r26, r26
    362c:	bb 1f       	adc	r27, r27
    362e:	ee 1f       	adc	r30, r30
    3630:	ff 1f       	adc	r31, r31
    3632:	a2 17       	cp	r26, r18
    3634:	b3 07       	cpc	r27, r19
    3636:	e4 07       	cpc	r30, r20
    3638:	f5 07       	cpc	r31, r21
    363a:	20 f0       	brcs	.+8      	; 0x3644 <__udivmodsi4_ep>
    363c:	a2 1b       	sub	r26, r18
    363e:	b3 0b       	sbc	r27, r19
    3640:	e4 0b       	sbc	r30, r20
    3642:	f5 0b       	sbc	r31, r21

00003644 <__udivmodsi4_ep>:
    3644:	66 1f       	adc	r22, r22
    3646:	77 1f       	adc	r23, r23
    3648:	88 1f       	adc	r24, r24
    364a:	99 1f       	adc	r25, r25
    364c:	1a 94       	dec	r1
    364e:	69 f7       	brne	.-38     	; 0x362a <__udivmodsi4_loop>
    3650:	60 95       	com	r22
    3652:	70 95       	com	r23
    3654:	80 95       	com	r24
    3656:	90 95       	com	r25
    3658:	9b 01       	movw	r18, r22
    365a:	ac 01       	movw	r20, r24
    365c:	bd 01       	movw	r22, r26
    365e:	cf 01       	movw	r24, r30
    3660:	08 95       	ret

00003662 <__prologue_saves__>:
    3662:	2f 92       	push	r2
    3664:	3f 92       	push	r3
    3666:	4f 92       	push	r4
    3668:	5f 92       	push	r5
    366a:	6f 92       	push	r6
    366c:	7f 92       	push	r7
    366e:	8f 92       	push	r8
    3670:	9f 92       	push	r9
    3672:	af 92       	push	r10
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	ca 1b       	sub	r28, r26
    368c:	db 0b       	sbc	r29, r27
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	09 94       	ijmp

0000369a <__epilogue_restores__>:
    369a:	2a 88       	ldd	r2, Y+18	; 0x12
    369c:	39 88       	ldd	r3, Y+17	; 0x11
    369e:	48 88       	ldd	r4, Y+16	; 0x10
    36a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    36a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    36a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    36a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    36a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    36aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    36ac:	b9 84       	ldd	r11, Y+9	; 0x09
    36ae:	c8 84       	ldd	r12, Y+8	; 0x08
    36b0:	df 80       	ldd	r13, Y+7	; 0x07
    36b2:	ee 80       	ldd	r14, Y+6	; 0x06
    36b4:	fd 80       	ldd	r15, Y+5	; 0x05
    36b6:	0c 81       	ldd	r16, Y+4	; 0x04
    36b8:	1b 81       	ldd	r17, Y+3	; 0x03
    36ba:	aa 81       	ldd	r26, Y+2	; 0x02
    36bc:	b9 81       	ldd	r27, Y+1	; 0x01
    36be:	ce 0f       	add	r28, r30
    36c0:	d1 1d       	adc	r29, r1
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	ed 01       	movw	r28, r26
    36ce:	08 95       	ret

000036d0 <itoa>:
    36d0:	fb 01       	movw	r30, r22
    36d2:	9f 01       	movw	r18, r30
    36d4:	e8 94       	clt
    36d6:	42 30       	cpi	r20, 0x02	; 2
    36d8:	c4 f0       	brlt	.+48     	; 0x370a <itoa+0x3a>
    36da:	45 32       	cpi	r20, 0x25	; 37
    36dc:	b4 f4       	brge	.+44     	; 0x370a <itoa+0x3a>
    36de:	4a 30       	cpi	r20, 0x0A	; 10
    36e0:	29 f4       	brne	.+10     	; 0x36ec <itoa+0x1c>
    36e2:	97 fb       	bst	r25, 7
    36e4:	1e f4       	brtc	.+6      	; 0x36ec <itoa+0x1c>
    36e6:	90 95       	com	r25
    36e8:	81 95       	neg	r24
    36ea:	9f 4f       	sbci	r25, 0xFF	; 255
    36ec:	64 2f       	mov	r22, r20
    36ee:	77 27       	eor	r23, r23
    36f0:	0e 94 99 1b 	call	0x3732	; 0x3732 <__udivmodhi4>
    36f4:	80 5d       	subi	r24, 0xD0	; 208
    36f6:	8a 33       	cpi	r24, 0x3A	; 58
    36f8:	0c f0       	brlt	.+2      	; 0x36fc <itoa+0x2c>
    36fa:	89 5d       	subi	r24, 0xD9	; 217
    36fc:	81 93       	st	Z+, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	00 97       	sbiw	r24, 0x00	; 0
    3702:	a1 f7       	brne	.-24     	; 0x36ec <itoa+0x1c>
    3704:	16 f4       	brtc	.+4      	; 0x370a <itoa+0x3a>
    3706:	5d e2       	ldi	r21, 0x2D	; 45
    3708:	51 93       	st	Z+, r21
    370a:	10 82       	st	Z, r1
    370c:	c9 01       	movw	r24, r18
    370e:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <strrev>

00003712 <strrev>:
    3712:	dc 01       	movw	r26, r24
    3714:	fc 01       	movw	r30, r24
    3716:	67 2f       	mov	r22, r23
    3718:	71 91       	ld	r23, Z+
    371a:	77 23       	and	r23, r23
    371c:	e1 f7       	brne	.-8      	; 0x3716 <strrev+0x4>
    371e:	32 97       	sbiw	r30, 0x02	; 2
    3720:	04 c0       	rjmp	.+8      	; 0x372a <strrev+0x18>
    3722:	7c 91       	ld	r23, X
    3724:	6d 93       	st	X+, r22
    3726:	70 83       	st	Z, r23
    3728:	62 91       	ld	r22, -Z
    372a:	ae 17       	cp	r26, r30
    372c:	bf 07       	cpc	r27, r31
    372e:	c8 f3       	brcs	.-14     	; 0x3722 <strrev+0x10>
    3730:	08 95       	ret

00003732 <__udivmodhi4>:
    3732:	aa 1b       	sub	r26, r26
    3734:	bb 1b       	sub	r27, r27
    3736:	51 e1       	ldi	r21, 0x11	; 17
    3738:	07 c0       	rjmp	.+14     	; 0x3748 <__udivmodhi4_ep>

0000373a <__udivmodhi4_loop>:
    373a:	aa 1f       	adc	r26, r26
    373c:	bb 1f       	adc	r27, r27
    373e:	a6 17       	cp	r26, r22
    3740:	b7 07       	cpc	r27, r23
    3742:	10 f0       	brcs	.+4      	; 0x3748 <__udivmodhi4_ep>
    3744:	a6 1b       	sub	r26, r22
    3746:	b7 0b       	sbc	r27, r23

00003748 <__udivmodhi4_ep>:
    3748:	88 1f       	adc	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	5a 95       	dec	r21
    374e:	a9 f7       	brne	.-22     	; 0x373a <__udivmodhi4_loop>
    3750:	80 95       	com	r24
    3752:	90 95       	com	r25
    3754:	bc 01       	movw	r22, r24
    3756:	cd 01       	movw	r24, r26
    3758:	08 95       	ret

0000375a <_exit>:
    375a:	f8 94       	cli

0000375c <__stop_program>:
    375c:	ff cf       	rjmp	.-2      	; 0x375c <__stop_program>
